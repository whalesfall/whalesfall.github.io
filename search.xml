<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[h5常用新增元素]]></title>
    <url>%2F2017%2F08%2F12%2Fh5%E5%B8%B8%E7%94%A8%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[HTML5简介HTML5 是 HTML 标准的下一个重要版本，用来替代 HTML 4.01，XHTML 1.0 以及 XHTML 1.1。HTML5 也是一种在万维网上构建和呈现内容的标准。 HTML5 是万维网联盟（W3C）和网页超文本技术工作小组（WHATWG）合作的产物。 HTML5 是近十年来 Web 开发标准最巨大的飞跃。HTML5 并非仅仅用来表示 Web 内容，它将 Web 带入一个成熟的应用平台，在 HTML5 平台上，视频、音频、图象、动画，以及同电脑的交互都被标准化。HTML5 引入了许多新元素和属性帮助我们构建现代化的网站。 HTML5引入的主要特性 新的语义化元素： 比如 &lt;header&gt;，&lt;footer&gt; 和 &lt;section&gt;。 表单 2.0： 改进了 HTML Web 表单，为 &lt;input&gt; 标签引入了一些新的属性。 持久的本地存储： 为了不通过第三方插件实现。 WebSocket： 用于 Web 应用程序的下一代双向通信技术。 服务器推送事件： HTML5 引入了从 Web 服务器到 Web 浏览器的事件，也被称作服务器推送事件（SSE）。 Canvas： 支持用 JavaScript 以编程的方式进行二维绘图。 音频和视频： 在网页中嵌入音频或视频而无需借助第三方插件。 地理定位： 用户可以选择与我们的网页共享他们的地理位置。 拖放： 把同一网页上的条目从一个位置拖放到另一个位置。 HTML5浏览器支持最新版 Apple Safari，Mozilla FireFox 和 Opera 支持大部分 HTML5 特性，IE9 也支持一些 HTML5 的功能。 预装在 iPhones，iPads 和 Android 手机上的手机浏览器都对 HTML5 有良好的支持。 自定义属性 给程序使用的数据，存储在自定义属性中 自定义属性只能存储字符串或数字 语法规则 必须以 data-前缀开头 多个英文单词使用 - 连接 &lt;div data-demo-test=&quot;hello world&quot;&gt;&lt;/div&gt; Dom使用 dataset 操作自定义属性 去掉前缀 data- 连接符内容采用驼峰命名法 boxDom.dataset.demoTest HTML5新语义标签 新增的语音元素等同于DIV. 可以独占一行.也可以设置宽高 没有语义的情况下，就需要是使用DIV了。 注意：千万不要为了语义而语义 header元素 header 元素代表“网页”或“section”的页眉。 通常包含h1-h6元素或hgroup，作为整个页面或者一个内容块的标题。 也可以包裹一节的目录部分，一个搜索框，一个nav，或者任何相关logo。 整个页面没有限制header元素的个数，可以拥有多个，可以为每个内容块增加一个header元素 注意事项: 可以是“网页”或任意“section”的头部部分； 没有个数限制。 如果hgroup或h1-h6自己就能工作的很好，那就不要用header。 footer元素 footer元素代表“网页”或“section”的页脚 通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料。 如果footer元素包含了整个节，那么它们就代表附录，索引，提拔，许可协议，标签，类别等一些其他类似信息。 注意事项: 可以是“网页”或任意“section”的底部部分； 没有个数限制，除了包裹的内容不一样，其他跟header类似。 hgroup元素 hgroup元素代表“网页”或“section”的标题 当元素有多个层级时，该元素可以将h1到h6元素放在其内 譬如文章的主标题和副标题的组合 注意事项: 如果只需要一个h1-h6标签就不用hgroup 如果有连续多个h1-h6标签就用hgroup 如果有连续多个标题和其他文章数据，h1-h6标签就用hgroup包住，和其他文章元数据一起放入header标签。 nav元素 nav元素代表页面的导航链接区域。用于定义页面的主要导航部分。 用在整个页面主要导航部分上。可以把导航条标签ul放到nav里面 article元素 article代表一个在文档，页面或者网站中自成一体的内容，其目的是为了让开发者独立开发或重用。 譬如论坛的帖子，博客上的文章，一篇用户的评论，一个互动的widget小工具。 注意事项: 一张页面可以用section划分为简介、文章条目和联系信息。不过在文章内页，最好用article。section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。 article、nav、aside可以理解为特殊的section，所以如果可以用article、nav、aside就不要用section，没实际意义的就用div article元素可以嵌套article也可以嵌套section. 也可以section 元素嵌套 article 这是一种特殊情况 section元素 section元素代表文档中的“节”或“段” “段”可以是指一篇文章里按照主题的分段；“节”可以是指一个页面里的分组。 section通常还带标题，虽然html5中section会自动给标题h1-h6降级，但是最好手动给他们降级 注意事项: 一张页面可以用section划分为简介、文章条目和联系信息。不过在文章内页，最好用article。section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。 表示文档中的节或者段； aside元素 (次要信息) aside元素被包含在article元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名词解释等。（特殊的section） 在article元素之外使用作为页面或站点全局的附属信息部分。最典型的是侧边栏，其中的内容可以是日志串连，其他组的导航，甚至广告，这些内容相关的页面。 注意事项: aside在article内表示主要内容的附属信息 在article之外则可做侧边栏，没有article与之对应，最好不用。 如果是广告，其他日志链接或者其他分类导航也可以用 HTML5 表单 &lt;form method=&quot;&quot;&gt; 请求方式 get post &lt;label for=&quot;&quot;&gt; input提示信息 需要获取input的id属性值关联 点击文字,鼠标光标在输入框内闪烁 input 输入类可选属性 email 电子邮箱输入框 tel 电话号码输入框 url 网页url地址栏输入框 search 搜索引擎输入框 number 输入数字 max 最大到 min 最小到 step 以某梯度增加或减少 选择类可选属性 range 特定范围内的数值选择器 max 最大到 min 最小到 step 以某梯度增加或减少 color 颜色选择 detetime-local 日期选择 time date week month 语义化表单新属性 placeholder 提示用户输入信息 autocomplete 是否保存用户输入值 on 默认值. 自动填充 off 关闭自动填充提示 autofocus 自动获取输入焦点 novalidate 不对输入进行验证. 填写在from中 maxlength:” length “控制表单输入项的文本长度 required 当表单提交时,输入项必须有内容 pattern 基于正则表达式验证格式. 重要的验证必须放在服务器端 formaction 在提交按钮中定义一个提交地址. 常用于保存草稿 formnovalidate 不做表单验证 DOM操作验证状态方法: setCustomValidity( ) 不符合自定义验证时, 返回给用户一个自定义的字符串内容. 验证通过时, 可以填写空串. 一定不能写null HTML5 history 新方法 history.pushState ( ) 增加历史记录 state object 数字，字符串，JSON对象 title（所有浏览器暂不支持） URL [可选]显示在地址栏的网页地址 history.replaceState( ) 修改历史记录 把当前的历史记录（history entry ）替换成新的历史记录 参数同pushState window.onpopstate 当窗口历史记录改变时运行的脚本 -onpopstate触发时机：相同文档中，两个历史记录前进或后退切换时。 HTML5 离线存储 APICookie存储的特点1.cookie由服务器创建，第一次响应后，记录在浏览器 2.每次请求，cookie都会发动到服务器 3.每次响应，cookie都会推送到浏览器 4.在浏览器读取cookie比较繁琐 5.cookie容量小，只有4kb - cookie 缺点: 需要在客户端和服务器端来回地传送，繁琐且消耗带宽； Storage存储 sessionStorage和localStorage的比较 数据生命周期： sessionStorage 数据创建到浏览器页签关闭 localStorage 数据创建到用户手动清除，或者使用clear(), removeItem(key)删除 数据共享： sessionStorage 条件：同一个浏览器页签 localStorage 条件：相同域名（协议，域名，端口）的不同网址 数据使用场景： 频繁操作且安全性不高的数据 可存储的数据格式： 数字 字符串 JSON对象，需要使用 JSON.stringify(JSON对象)把其转换成字符串再存储。获取后再调用JSON.parse(JSON的字符串)转成JSON对象再使用。 优点: sessionStorage / localStorage 优点: 保存在服务器端. 存储结构化方便提取 sessionStorage / localStorage setItem(“key”, “value”); 增加一个数据 getItem(‘key’) 获取对应的value值 removeItem(“key”); 删除一个数据 clear(); 清除所有 length 获取数据长度 key(num) 获取指定索引位的key值 HTML 音视频处理视频基础内容目前实现网页视频播放的技术 - Flash Flash并不是浏览器原生支持(第三方组件) Flash的性能并不好 移动端不支持Flash技术 HTML 5 提供的视频处理技术 - &lt;video&gt; 提供了相对应的基本处理方式 提供了高级编程自定义方式 &lt;video&gt;元素所支持的视频格式 MP4格式：视频文件扩展名为”.mp4” OGG格式：视频文件扩展名为”.ogv” WEBM格式：视频文件扩展名为:”.webm” 是由Google公司推出的(最初Chrome并不支持) 是目前唯一一个支持超高清的视频格式 如何使用元素引入单个视频格式 &lt;video src=&quot;视频文件的路径&quot; autoplay&gt; 浏览器不支持的提示内容 &lt;/video&gt; autoplay属性：自动播放视频 width属性：设置视频的宽度 height属性：设置视频的高度 style属性：设置CSS样式 class属性：设置CSS样式 &lt;video src=&quot;../DATA/oceans-clip.mp4&quot; autoplay width=&quot;640px&quot; height=&quot;400px&quot; style=&quot;background:black;&quot;&gt; 非常抱歉,你的浏览器不支持该视频! &lt;/video&gt; 引入多个视频格式 &lt;video autoplay&gt; &lt;source src=&quot;视频文件的路径&quot; /&gt; &lt;source src=&quot;视频文件的路径&quot; /&gt; &lt;source src=&quot;视频文件的路径&quot; /&gt; 浏览器不支持的提示内容 &lt;/video&gt; &lt;!-- 解决了浏览器对视频格式的兼容问题 --&gt; &lt;video autoplay&gt; &lt;!-- &lt;source&gt;元素 * 引入视频文件(一个&lt;video&gt;元素允许包含多个&lt;source&gt;) --&gt; &lt;source src=&quot;../DATA/oceans-clip.mp4&quot; /&gt; &lt;source src=&quot;../DATA/oceans-clip.ogv&quot; /&gt; &lt;source src=&quot;../DATA/oceans-clip.webm&quot; /&gt; &lt;/video&gt; 元素的属性 autoplay属性：自动播放 controls属性：提供控制面板 &lt;video src=&quot;../DATA/oceans-clip.mp4&quot; controls&gt;&lt;/video&gt; loop属性：循环播放 &lt;video src=&quot;../DATA/oceans-clip.mp4&quot; autoplay loop&gt;&lt;/video&gt; poster属性：播放之前实现一张图片 &lt;video src=&quot;../DATA/oceans-clip.mp4&quot; controls poster=&quot;../DATA/oceans-clip.png&quot;&gt;&lt;/video&gt; preload属性：预加载视频 none：不预加载 auto：默认值,尽快预加载 metadata：预加载除视频之外的内容(宽度、高度等) 视频高级编程 事件 play：视频播放时触发 pause：视频暂停时触发 ended：视频播放结束时触发 error：视频播放错误时触发 方法 play( )：用于播放视频 pause( )：用于暂停视频 load( )：用于加载视频 canPlayType( )：判断当前浏览器是否支持当前视频格式 属性 paused：如果视频为暂停或未播放时,返回true ended：如果视频播放完毕时,返回true duration：返回当前视频的时长 currentTime：获取或设置视频的当前位置 音频基础内容 目前音频处理技术 Flash技术也可以音频处理 Media Player播放器允许嵌入在网页中 HTML 5提供的音频处理 - &lt;audio&gt; 浏览器原生支持 性能很好 移动端支持 &lt;audio&gt;元素支持的音频格式 mp3 ogg wav 如何使用元素 引入单个音频格式 &lt;audio src=&quot;音频文件的路径&quot; autoplay&gt; 浏览器不支持的提示内容 &lt;/audio&gt; 引入多个音频格式 &lt;audio autoplay&gt; &lt;source src=&quot;音频文件的路径&quot; /&gt; &lt;source src=&quot;音频文件的路径&quot; /&gt; &lt;source src=&quot;音频文件的路径&quot; /&gt; 浏览器不支持的提示内容 &lt;/audio&gt; 元素的特有属性 autoplay属性：自动播放 controls属性：提供控制面板 loop属性：循环播放 preload属性：预加载视频 none：不预加载 auto：默认值,尽快预加载 metadata：预加载除视频之外的内容(宽度、高度等) 元素的高级编程 事件 play：视频播放时触发 pause：视频暂停时触发 ended：视频播放结束时触发 error：视频播放错误时触发 方法 play( )：用于播放视频 pause( )：用于暂停视频 load( )：用于加载视频 canPlayType( )：判断当前浏览器是否支持当前视频格式 属性 paused：如果视频为暂停或未播放时,返回true ended：如果视频播放完毕时,返回true duration：返回当前视频的时长 currentTime：获取或设置视频的当前位置 Canvas画布Canvas简介 Canvas技术允许在HTML页面直接绘制图形 不再需要引入外部图片(图形),HTML页面性能有所提高 可以实现一些比较复杂的图形绘制工作 Canvas主要应用方向 Web应用方面主要实现图表类 网页游戏方面 - 主要实现2D效果 HTML5提供的技术 Canvas - 主要以2D为主 WebGL - 主要以3D为主 SVG - 矢量图 如何使用Canvas画布使用canvas 在HTML页面中定义&lt;canvas&gt;元素 设置&lt;canvas&gt;元素宽度和高度使用属性方式 使用CSS样式方式设置&lt;canvas&gt;元素的宽度和高度 在JS代码中 获取&lt;canvas&gt;元素 通过&lt;canvas&gt;元素,创建画布对象 getContext(‘2d’)函数 返回画布对象 利用画布对象进行图形的绘制 &lt;!-- 1\. 在HTML页面中,定义&lt;canvas&gt;元素 * 默认只定义&lt;canvas&gt;元素时 * 效果非常类似于&lt;div&gt;元素,但不一样的地方: * &lt;div&gt;元素在默认情况下,不具有高度和宽度的 * &lt;canvas&gt;元素在默认情况下,具有高度和宽度的 * 宽度 - 300px * 高度 - 150px * 设置&lt;canvas&gt;元素的高度和宽度 * (建议)使用属性width和height * 使用CSS中的属性width和height * 绘制的图形会被拉伸 --&gt; &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink;&quot;&gt;&lt;/canvas&gt; &lt;!-- &lt;canvas id=&quot;canvas&quot; style=&quot;width:500px;height:500px;&quot;&gt;&lt;/canvas&gt; --&gt; &lt;script&gt; // 2\. 获取HTML页面中的&lt;canvas&gt;元素 var canvas = document.getElementById(&quot;canvas&quot;); /* 3\. 通过&lt;canvas&gt;元素,创建画布对象 使用getContext(type)函数,创建画布对象 * 该函数返回画布对象 * type参数 * 设置当前创建的画布是2d还是3d * 注意 * 参数选项是2d(3d效果使用WebGL) * 必须写成&quot;2d&quot; */ var context = canvas.getContext(&quot;2d&quot;); // 4\. 利用画布对象,进行绘制图形 context.fillRect(10,10,100,100); &lt;/script&gt; Canvas的特点 绘制的图形与HTML页面之间是无关系的 通过Canvas绘制的图形不能使用DOM API 通过Canvas绘制的图形不能绑定事件 Canvas画布最终是以图片(png|jpg)形式出现 绘制图形默认的颜色为黑色 绘制图形绘制矩形fillRect(x,y,width,height) - 绘制实心(填充)矩形 x和y：绘制矩形的左上角的坐标值 width：设置绘制矩形的宽度(单位为px) height：设置绘制矩形的高度(单位为px) strokeRect(x,y,width,height) - 绘制空心(描边)矩形 x和y：绘制矩形的左上角的坐标值 width：设置绘制矩形的宽度(单位为px) height：设置绘制矩形的高度(单位为px) clearRect(x,y,width,height) - 清除指定区域的矩形 x和y：绘制矩形的左上角的坐标值 width：设置绘制矩形的宽度(单位为px) height：设置绘制矩形的高度(单位为px) &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; // 1\. 获取&lt;canvas&gt;元素 var canvas = document.getElementById(&quot;canvas&quot;); // 2\. 创建画布对象 var context = canvas.getContext(&apos;2d&apos;); // 3\. 绘制图形 // a. 绘制实心矩形 context.fillRect(10,10,100,100); // b. 绘制空心矩形 context.strokeRect(120,10,100,100); // c. 清除指定区域的矩形 context.fillRect(230,10,100,100); context.clearRect(240,20,80,80); &lt;/script&gt; 设置样式 fillStyle：设置填充样式 strokeStyle：设置描边样式 globalAlpha：设置透明度(0-1) 注意 一定要先设置样式(颜色),再绘制图形 每次改变样式(颜色),重新设置 设置颜色的方式 使用普通的单词 使用#000000形式 使用三原色rgba(0,0,0,1)形式 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&apos;2d&apos;); // a. 设置填充样式 context.fillStyle = &quot;pink&quot;; // b. 绘制实心矩形 context.fillRect(10,10,100,100); context.fillStyle = &quot;blue&quot;; context.fillRect(10,120,100,100); // 设置描边样式 context.strokeStyle = &quot;red&quot;; context.strokeRect(120,10,100,100); context.strokeStyle = &quot;green&quot;; context.strokeRect(120,120,100,100); // 设置透明度 context.globalAlpha = 0.5; context.fillRect(230,10,100,100); context.fillStyle = &quot;black&quot;; context.globalAlpha = 0.1; context.fillRect(230,120,100,100); &lt;/script&gt; 设置渐变线性渐变 createLinearGradient(x1,y1,x2,y2) 基准线：是设置线性渐变的标准 参数 x1和y1：基准线的起点坐标值 x2和y2：基准线的终点坐标值 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&apos;2d&apos;); /* 设置线性渐变 createLinearGradient(x1,y1,x2,y2)方法 * 该方法具有返回值,是渐变对象 */ var grd = context.createLinearGradient(0,0,100,100); /* 设置线性渐变的颜色和位置 addColorStop(position,color) * position - 设置颜色的位置 * 值的范围为 0 - 1 * color - 设置颜色 */ grd.addColorStop(0,&quot;red&quot;); grd.addColorStop(1,&quot;blue&quot;); grd.addColorStop(0.5,&quot;yellow&quot;); // 将设置的线性渐变,赋值给样式(fillStyle和strokeStyle) context.fillStyle = grd; // 绘制矩形 context.fillRect(0,0,100,100); &lt;/script&gt; 射线(扇形)渐变 createRadialGradient(x1,y1,r1,x2,y2,r2) 基准圆(2个)：设置射线渐变的标准 参数 x1和y1：第一个基准圆的圆心 r1：第一个基准圆的半径 x2和y2：第二个基准圆的圆心 r2：第二个基准圆的半径 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); /* 设置射线渐变 createRadialGradient(x1,y1,r1,x2,y2,r2) * 该方法返回渐变对象 */ var grd = context.createRadialGradient(100,100,100,canvas.width,canvas.height,200); /* 设置渐变颜色 */ grd.addColorStop(0,&quot;red&quot;); grd.addColorStop(1,&quot;blue&quot;); // 将渐变对象赋值给样式 context.fillStyle = grd; // 绘制矩形 context.fillRect(0,0,canvas.width,canvas.height); &lt;/script&gt; 设置渐变颜色 addColorStop(position,color) position：设置渐变颜色的位置 值的范围必须是 0-1 color：设置渐变的颜色 绘制文字设置文字的属性：font属性 设置文字的对齐方式 水平对齐：textAlign left：基准线在左边 center：基准线在中间 right：基准线在右边 垂直对齐：textBaseline top：基准线在上边 middle：基准线在中间 bottom：基准线在下边 hanging：悬挂基线 alphabetic：字母基线 绘制文字的方法 fillText(text,x,y)：绘制实心文字 text：绘制的文字内容 x和y：绘制文字的坐标值 strokeText(text,x,y)：绘制空心文字 text：绘制的文字内容 x和y：绘制文字的坐标值 设置阴影 shadowColor：设置阴影颜色 shadowOffsetX：设置水平方向阴影 shadowOffsetY：设置垂直方向阴影 shadowBlur：设置阴影程度 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&apos;2d&apos;); // 设置文字样式 context.font = &quot;bold 48px 宋体&quot;; // 基准线 context.beginPath(); context.moveTo(100,0); context.lineTo(100,400); context.stroke(); // 设置水平对齐 context.textAlign = &quot;right&quot;; // 绘制文字 context.fillText(&quot;达内&quot;,100,50); // 设置水平对齐 context.textAlign = &quot;center&quot;; // 绘制文字 context.fillText(&quot;达内&quot;,100,100); // 设置水平对齐 context.textAlign = &quot;left&quot;; // 绘制文字 context.fillText(&quot;达内&quot;,100,150); // 基准线 context.beginPath(); context.moveTo(0,300); context.lineTo(500,300); context.stroke(); // 设置垂直对齐 context.textBaseline = &quot;top&quot;; context.strokeText(&quot;达内&quot;,0,300); context.textBaseline = &quot;middle&quot;; context.strokeText(&quot;达内&quot;,100,300); context.textBaseline = &quot;bottom&quot;; context.strokeText(&quot;达内&quot;,200,300); context.textBaseline = &quot;hanging&quot;; context.strokeText(&quot;达内&quot;,300,300); context.textBaseline = &quot;alphabetic&quot;; context.strokeText(&quot;达内&quot;,400,300); &lt;/script&gt; Canvas绘图创建路径图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。 首先，需要创建路径起始点。 然后，使用画图命令去画出路径。 之后，把路径封闭。 一旦路径生成，你就能通过描边或填充路径区域来渲染图形。 绘制矩形 调用beginPath( )方法，创建新建一条路径。 使用rect( x, y, width, height )方法，设置矩形的坐标值及宽度和高度。 x和y：表示矩形的左上角坐标值。 width和height：表示矩形的宽度和高度。 通过fill( )或stroke( )方法进行绘制。 fill( )方法：通过填充路径的内容区域绘制实心图形。 stroke( )方法：通过线条绘制空心图形。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 绘制实心矩形 context.beginPath();// 开始创建路径 context.rect(10,10,100,100);// 设置矩形 //context.closePath(); context.fill();// 调用绘制方法 // 绘制空心矩形 context.beginPath();// 开始创建路径 context.rect(10,120,100,100);// 设置矩形 context.stroke();// 调用绘制方法 &lt;/script&gt; 绘制圆形 调用beginPath( )方法，创建新建一条路径。 使用arc( x, y, radius, startAngle, endAngle, anticlockwise )方法，设置矩形的坐标值及宽度和高度。 x和y：表示圆形的圆心坐标值。 radius：表示圆形的半径。 startAngle：表示绘制圆形的开始点，值为 0。 endAngle：表示绘制圆形的结束点，值为 Math.PI*2。 anticlockwise：表示是以顺时针还是以逆时针方式绘制圆形，Boolean值。 false：默认值，表示顺时针。 true：表示逆时针。 通过fill( )或stroke( )方法进行绘制。 fill( )方法：通过填充路径的内容区域绘制实心图形。 stroke( )方法：通过线条绘制空心图形。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 绘制实心圆形 context.beginPath();// 开始创建路径 context.arc(170,60,50,0,Math.PI*2);// 设置圆形 context.fill();// 调用绘制方法 // 绘制空心圆形 context.beginPath(); context.arc(170,170,50,0,Math.PI*2); context.stroke(); &lt;/script&gt; 绘制弧形 调用beginPath( )方法，创建新建一条路径。 使用arc( x, y, radius, startAngle, endAngle, anticlockwise )方法，设置圆形。 x和y：表示圆形的圆心坐标值。 radius：表示圆形的半径。 startAngle：表示绘制圆形的开始点。 取值范围：0 至 Math.PI*2。 endAngle：表示绘制圆形的结束点。 取值范围：0 至 Math.PI*2。 anticlockwise：表示是以顺时针还是以逆时针方式绘制圆形，Boolean值。 false：默认值，表示顺时针。 true：表示逆时针。 通过fill( )或stroke( )方法进行绘制。 fill( )方法：通过填充路径的内容区域绘制实心图形。 stroke( )方法：通过线条绘制空心图形。 注意：如果绘制的是空心弧形的话，在arc( )方法调用后： 如果使用closePath( )方法的话，绘制的图形会自动将终点和起点连接成线。 如果不用closePath( )方法的话，绘制的图形会呈现开口状。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 绘制空心弧形 context.beginPath(); context.arc(390,60,50,Math.PI/2,Math.PI*3/2); context.stroke(); context.beginPath(); context.arc(390,170,50,Math.PI/2,Math.PI*3/2,true); context.stroke(); context.beginPath(); context.arc(390,280,50,Math.PI/2,Math.PI*3/2); context.closePath(); context.stroke(); context.beginPath(); context.arc(390,390,50,Math.PI/2,Math.PI*3/2,true); context.closePath(); context.stroke(); &lt;/script&gt; 绘制直线 调用beginPath( )方法，创建新建一条路径。 使用moveTo( x, y )方法，设置直线的起点坐标值。 x和y：表示直线的起点坐标值。 使用lineTo( x, y )方法，设置直线的终点坐标值。 x和y：表示直线的终点坐标值。 通过stroke( )方法进行绘制。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 绘制直线 context.beginPath(); context.moveTo(10,10); context.lineTo(200,10); context.stroke(); &lt;/script&gt; 绘制折线 调用beginPath( )方法，创建新建一条路径。 使用moveTo( x, y )方法，设置直线的起点坐标值。 x和y：表示直线的起点坐标值。 使用lineTo( x, y )方法，设置直线的终点坐标值。 x和y：表示直线的终点坐标值。 通过stroke( )方法进行绘制。 注意：在绘制折线的时候，lineTo( )方法既可以绘制折点，也可以绘制终点。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 绘制折线一 context.beginPath(); context.moveTo(10,100); context.lineTo(200,100); context.stroke(); context.beginPath(); context.moveTo(200,100); context.lineTo(200,300); context.stroke(); // 绘制折线二 context.beginPath(); context.moveTo(400,100); context.lineTo(500,100); context.lineTo(500,400); context.stroke(); &lt;/script&gt; 绘制多边形 调用beginPath( )方法，创建新建一条路径。 使用moveTo( x, y )方法，设置直线的起点坐标值。 x和y：表示直线的起点坐标值。 使用lineTo( x, y )方法，设置直线的终点坐标值。 x和y：表示直线的终点坐标值。 调用closePath( )方法，闭合当前绘制的路径。 通过fill( )或stroke( )方法进行绘制。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 利用折线的绘制,绘制空心矩形 context.beginPath(); context.moveTo(50,50); context.lineTo(150,50); context.lineTo(150,150); context.lineTo(50,150); context.lineTo(100,100); context.lineTo(50,50); context.stroke(); &lt;/script&gt; 设置线型所有画布操作都使用相同的线型，即默认线型。实际上线条的宽度、端点都可以根据实际绘图需要进行调整。 设置线宽lineWidth：指定线条粗细，默认值是1.0。 &lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&apos;myCanvas&apos;); var context = canvas.getContext(&apos;2d&apos;); context.beginPath(); context.moveTo(100, 150); context.lineTo(450, 50); context.lineWidth = 15; context.stroke(); &lt;/script&gt; 设置端点形状lineCap：指定线条端点形状。 butt：默认，向线条的每个末端添加平直的边缘。 round：向线条的每个末端添加圆形线帽。 square：向线条的每个末端添加正方向线帽。 注意：round和square会使线条略变微长。 &lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&apos;myCanvas&apos;); var context = canvas.getContext(&apos;2d&apos;); // butt line cap (top line) context.beginPath(); context.moveTo(200, canvas.height / 2 - 50); context.lineTo(canvas.width - 200, canvas.height / 2 - 50); context.lineWidth = 20; context.strokeStyle = &apos;#0000ff&apos;; context.lineCap = &apos;butt&apos;; context.stroke(); // round line cap (middle line) context.beginPath(); context.moveTo(200, canvas.height / 2); context.lineTo(canvas.width - 200, canvas.height / 2); context.lineWidth = 20; context.strokeStyle = &apos;#0000ff&apos;; context.lineCap = &apos;round&apos;; context.stroke(); // square line cap (bottom line) context.beginPath(); context.moveTo(200, canvas.height / 2 + 50); context.lineTo(canvas.width - 200, canvas.height / 2 + 50); context.lineWidth = 20; context.strokeStyle = &apos;#0000ff&apos;; context.lineCap = &apos;square&apos;; context.stroke(); &lt;/script&gt; 设置交点形状 lineJoin：指定两条线之间的连接点形状。 round：创建圆角。 bevel：创建斜角。 miter：默认，创建尖角。 miterLimit：与lineJoin一起使用，当lineJoin设置为miter时，可用于确定线条交接点的延伸范围。 &lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&apos;myCanvas&apos;); var context = canvas.getContext(&apos;2d&apos;); // set line width for all lines context.lineWidth = 25; // miter line join (left) context.beginPath(); context.moveTo(99, 150); context.lineTo(149, 50); context.lineTo(199, 150); context.lineJoin = &apos;miter&apos;; context.stroke(); // round line join (middle) context.beginPath(); context.moveTo(239, 150); context.lineTo(289, 50); context.lineTo(339, 150); context.lineJoin = &apos;round&apos;; context.stroke(); // bevel line join (right) context.beginPath(); context.moveTo(379, 150); context.lineTo(429, 50); context.lineTo(479, 150); context.lineJoin = &apos;bevel&apos;; context.stroke(); &lt;/script&gt; 处理图像在HTML5中，不仅可以使用Canvas API来绘制图形，还可以读取磁盘或网络中的图像文件，然后使用Canvas API将该图像绘制在画布中。 绘制图像 加载图像。 使用相同页面中的图片。 使用相同页面中的其他Canvas元素。 可以脚本通过Image( )构造函数创建图像。 绘制图像。 drawImage( img, x, y )方法 img：需要绘制的图像。 x和y：绘制图像的坐标值。 drawImage( img, x, y, width, height )方法 img：需要绘制的图像。 x和y：绘制图像的坐标值。 width和height：设置绘制图像的宽度和高度。 &lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&apos;myCanvas&apos;); var context = canvas.getContext(&apos;2d&apos;); var imageObj = new Image(); imageObj.src = &apos;darth-vader.jpg&apos;; imageObj.onload = function() { context.drawImage(imageObj, 69, 50); }; &lt;/script&gt; 注意：若调用 drawImage 时，图片没装载完，那什么都不会发生（在一些旧的浏览器中可能会抛出异常）。因此你应该用load时间来保证不会在加载完毕之前使用这个图片： var img = new Image(); // 创建img元素 img.src = &apos;myImage.png&apos;; // 设置图片源地址 img.onload = function(){ // 执行drawImage语句 } 平铺图像所谓图像平铺就是用按一定比例缩小后的图像将画布填满。 加载图像。 使用相同页面中的图片。 使用相同页面中的其他Canvas元素。 可以脚本通过Image( )构造函数创建图像。 设置平铺方式。 createPattern( img, type )方法 img：需要平铺的图像。 type：平铺方式。 no-repeat：不平铺 repeat-x：水平方向平铺 repeat-y：垂直方向平铺 repeat：全方向平铺 该方法返回平铺对象。 将平铺对象赋值给filleStyle或strokeStyle属性。 将平铺的图像进行绘制。 &lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&apos;myCanvas&apos;); var context = canvas.getContext(&apos;2d&apos;); var imageObj = new Image(); imageObj.src = &apos;wood-pattern.png&apos;; imageObj.onload = function() { var pattern = context.createPattern(imageObj, &apos;repeat&apos;); context.rect(0, 0, canvas.width, canvas.height); context.fillStyle = pattern; context.fill(); }; &lt;/script&gt; 注意：若调用 createPattern 时，图片没装载完，那什么都不会发生（在一些旧的浏览器中可能会抛出异常）。因此你应该用load时间来保证不会在加载完毕之前使用这个图片： var img = new Image(); // 创建img元素 img.src = &apos;myImage.png&apos;; // 设置图片源地址 img.onload = function(){ // 执行createPattern语句 } 切割图像 调用beginPath( )方法，创建新建一条路径。 使用rect( )或arc( )方法 通过clip( )方法进行切割。 var canvas = document.getElementById(&apos;canvas&apos;); var context = elem.getContext(&apos;2d&apos;); var image=new Image(); image.src=&quot;img/flower.jpg&quot;; image.onload=function(){ context.drawImage(image,0,0,280,190); } context.beginPath(); context.arc(140,95,60,0,Math.PI*2,true); context.closePath(); context.clip(); 画布方法状态方法 save（），保存当前画布属性、状态。 restore（），恢复画布属性、状态。 var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;); ctx.fillRect(0,0,150,150); // Draw a rectangle with default settings ctx.save(); // Save the default state ctx.fillStyle = &apos;#09F&apos; // Make changes to the settings ctx.fillRect(15,15,120,120); // Draw a rectangle with new settings ctx.save(); // Save the current state ctx.fillStyle = &apos;#FFF&apos; // Make changes to the settings ctx.globalAlpha = 0.5; ctx.fillRect(30,30,90,90); // Draw a rectangle with new settings ctx.restore(); // Restore previous state ctx.fillRect(45,45,60,60); // Draw a rectangle with restored settings ctx.restore(); // Restore original state ctx.fillRect(60,60,30,30); // Draw a rectangle with restored settings 转换方法 translate(x, y)：用来移动 canvas 和它的原点到一个不同的位置。 x 是左右偏移量。 y 是上下偏移量。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); context.fillRect(50,50,100,100); // 平移方法 context.translate(250,250); context.fillRect(50,50,100,100); &lt;/script&gt; scale(x, y)：用它来增减图形在 canvas 中的像素数目，对形状，位图进行缩小或者放大。 x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。 值分类： 值比 1.0 小表示缩小。 比 1.0 大则表示放大。 值为 1.0 时什么效果都没有。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); context.fillRect(400,250,100,100); // 旋转方法 context.rotate(Math.PI/180*15); context.fillRect(400,250,100,100); context.rotate(Math.PI/180*15); context.fillRect(400,250,100,100); &lt;/script&gt; rotate(angle)：用于以原点为中心旋转 canvas。 旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。 &lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.getElementById(&quot;canvas&quot;); var context = canvas.getContext(&quot;2d&quot;); // 缩放方法 context.scale(0.5,0.5); context.fillRect(100,100,300,300); &lt;/script&gt; Chart.js库Chart.js是一个简单、面向对象、为设计者和开发者准备的图表绘制工具库。 官方网址：http://www.chartjs.org/ Chart.js的特点 基于HTML 5：Chart.js基于HTML5 canvas技术，支持所有现代浏览器，并且针对IE7/8提供了降级替代方案。 简单、灵活：Chart.js不依赖任何外部工具库，轻量级（压缩之后仅有4.5k），并且提供了加载外部参数的方法。 如何使用Chart.js框架 在HTML页面中引入Chart.js文件。 src="Chart.js">````12- 创建 ````&lt;canvas&gt;````元素：用于显示Chart图表的容器。 - ````&lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt; 获取Canvas对象。 12- 创建Chart图表对象。 - ````new Chart(ctx); 通过Chart图表对象进行绘制。 chart.PolarArea(data); Chart.js全局配置Chart.js 全局配置是在chart.js 第一个正式版本中引入。Chart.js 全局配置用于改变所有图表的类型，避免了需要在每一个图表中单独进行设置。当然，Chart.js 全局配置也可以专门为某一个特定的图表进行配置。 语法 Chart.defaults.global.参数名 = 参数值; 举例 Chart.defaults.global.responsive = true; 曲线图曲线图就是将多个数据点绘制在一条线上，通常被用于展示趋势的数据或两组数据之间的对比。 new Chart(ctx).Line(data, options) data：用于设置曲线上的数据、样式及名称。 options：选项，用于配置曲线图。 柱状图柱状图就是使用柱状方式显示数据的一种方式，通常被用于展示趋势的数据或多组数据之间的比较。 new Chart(ctx).Bar(data, options) data：用于设置柱状图上的数据、样式及名称。 options：选项，用于配置柱状图。 饼状图饼状图可能是所有图表中最为常用的一种，就是将一个圆划分成若干个部分，每个弧形展示每个数据的比例值。通常被用于展示多组数据之间的比例。 new Chart(ctx).Pie(data,options) data：用于设置饼图的数据、样式及名称。 options：选项，用于配置饼图。 雷达图雷达图就是一种展示多个数据点以及它们之间变化的方式，通常被用于比较点的两个或多个不同的数据集。 new Chart(ctx).Radar(data, options) data：用于设置雷达图的数据、样式及名称。 options：选项，用于配置雷达图。 环形图环形图类似于饼状图，但环形图是一个空心的环形形状，通常被用于展示多组数据之间关系的比例。 new Chart(ctx).Doughnut(data,options) data：用于设置环形图的数据、样式及名称。 options：选项，用于配置环形图。 极地区域图极地区域图类似于饼状图，但每一个扇形的角度和半径取决于不同的值，通常被用于需要展示类似于饼状图的比较数据的基础上，还需要展示范围值的比较。 new Chart(ctx).PolarArea(data, options) data：用于设置极地区域图的数据、样式及名称。 options：选项， 用于配置极地区域图。]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery(二)]]></title>
    <url>%2F2017%2F08%2F08%2FjQuery-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[jQuery中的事件页面加载原生DOM中的事件具有页面加载的内容onload事件，在jQuery中同样提供了对应的内容ready()函数。 ready与onload之间的区别： onload: 没有简写方式 当HTML页面所有内容加载完毕后才执行onload 一个HTML页面只能编写一个onload ready: 具有简写方式 当DOM节点加载完毕后就执行ready 一个HTML页面允许同时编写多个ready ready()的编写方式： $(document).ready(function(){}); $().ready(function(){}); $(function(){}); 事件绑定jQuery中提供了事件绑定与解绑机制，类似于原生DOM中的addEventListener()方法。 单事件绑定单事件绑定就是指为指定元素绑定一个指定的事件，例如click、change等。 多事件绑定多事件绑定就是为指定元素同时绑定多个指定的事件，例如同时绑定mouseover和mouseout事件等。 模拟操作模拟操作就是指通过程序模拟用户在页面中的操作，比如用户点击某个按钮的事件完成一个效果，jQuery中可以通过该方法模拟用户点击按钮事件。也就是说，不需要用户的操作行为，而是我们通过程序来模拟用户操作。 $(&apos;#btn&apos;).bind(&quot;click&quot;, function(){ $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数1&lt;/p&gt;&quot;); }).bind(&quot;click&quot;, function(){ $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数2&lt;/p&gt;&quot;); }).bind(&quot;click&quot;, function(){ $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数3&lt;/p&gt;&quot;); }); $(&apos;#btn&apos;).trigger(&quot;click&quot;); 事件冒泡什么是事件冒泡在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。 阻止事件冒泡 DOM标准：event.stopPropagation() IE: event.cancelBubble=true 事件对象什么是事件对象事件是一种JavaScript结构，它会在元素获得处理事件的机会时被传递给被调用的事件处理程序。这个对象中包含与事件相关的信息，也提供了可以影响事件在DOM中传递进程的一些方法。 事件对象的常用属性 srcElement/target : 事件源对象 eventPhase : 事件所处的传播阶段 clientX/offsetX/pageX/screenX/x：事件发生的X坐标 clientY/offsetY/pageY/screenY/y：事件发生的Y坐标 which/keyCode/charCode : 键盘事件中按下的按键 button：鼠标哪个按键被按下了 cancelBubble ：是否取消事件冒泡 returnValue : 是否阻止事件默认行为 阻止默认行为所谓默认行为，就是指页面中默认具有的一些行为，例如表单提交、连接跳转等效果。 event.preventDefault(); return false; jQuery类数组操作类数组对象就是结构上类似于数组的对象，该对象具备数组的一些特性属性或方法，同时具有自己独特的一些属性或方法。 数组与类数组对象的区别 数组的类型是Array 类数组对象的类型是Object 类数组的操作 length属性：获取指定元素的个数。 eq(index)：将下标等于index的DOM对象取出来。 get(index)：返回一个DOM对象组成的数组。 index（obj）：返回DOM或jQuery对象在类数组中的下标。 遍历方法： $(selector).each(callback) callback：回调函数，function(index,domEle){} index：遍历过程中的索引值 domEle：遍历后得到的DOM对象 $.each($(&quot;input&quot;),function(index,domEle){ console.log(domEle.value); console.log($(domEle).val()); console.log(this.value); console.log($(this).val()); }); $.makeArray(obj) 将类数组对象转换为数组对象 $.inArray(value, array) 查找元素在数组中的位置确定第一个参数在数组中的位置，从0开始(如果没有找到则返回 -1 ) $.toArray() 把jQuery集合中所有DOM元素恢复成一个数组。 jQuery插件jQuery 日期插件layDate日期插件致力于成为全球最用心的web日期支撑，为国内外所有从事web应用开发的同仁提供力所能及的动力。 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_laydate插件的基本使用&lt;/title&gt; &lt;script src=&quot;laydate/laydate.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input placeholder=&quot;请输入日期&quot; class=&quot;laydate-icon&quot; onclick=&quot;laydate()&quot;&gt; &lt;br&gt; &lt;input placeholder=&quot;请输入日期&quot; id=&quot;hello1&quot;&gt; &lt;span class=&quot;laydate-icon&quot; onclick=&quot;laydate({elem: &apos;#hello1&apos;});&quot;&gt;&lt;/span&gt; &lt;/body&gt; &lt;/html&gt; layDate API选项 elem: ‘#id’, //需显示日期的元素选择器 event: ‘click’, //触发事件 format: ‘YYYY-MM-DD hh!’, //日期格式 istime: false, //是否开启时间选择 isclear: true, //是否显示清空 istoday: true, //是否显示今天 issure: true, 是否显示确认 festival: true //是否显示节日 min: 1900-01-01 00:00:00, //最小日期 max: 2099-12-31 23:59:59, //最大日期 start: 2014-6-15 23:00:00, //开始日期 fixed: false, //是否固定在可视区域 zIndex: 99999999, //css z-index choose: function(dates){} //选择好日期的回调 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02_laydate插件的高级使用&lt;/title&gt; &lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;laydate/laydate.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=&quot;mydate&quot; placeholder=&quot;请输入日期&quot; class=&quot;laydate-icon&quot;&gt; &lt;script&gt; laydate({ elem : &quot;#mydate&quot;, event : &quot;focus&quot;, istime : true, isclear : false, istoday : false, issure : false }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 表单验证插件表单验证插件主要是针对表单元素的值进行验证，并给出响应的图形以及文字提示。 常用验证插件 formValidator jQuery.validator easyForm validate.js jQuery.validator插件该插件提供用户方便地实现表单验证，同时还提供大量的定制选项。官方地址：http://jqueryvalidation.org/ 引入必要文件 引入jQuery库文件 引入插件文件 dist/jquery.validate.js 引入国际化文件 (提示语言文件)dist–localization–message_zh.js 中文提示语言 在HTML页面定义表单 表单的元素使用HTML5提供的新表单验证功能 required 表示必填项 在JS逻辑中填写 通过表单调用validate()核心方法$().validate(); validation基本使用&lt;div id=&quot;main&quot;&gt; &lt;p&gt;Take a look at the source to see with metadata.&lt;/p&gt; &lt;!-- Custom rules and messages via data- attributes --&gt; &lt;form class=&quot;cmxform&quot; id=&quot;commentForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt; &lt;fieldset&gt; &lt;legend&gt;Please enter your email address&lt;/legend&gt; &lt;p&gt; &lt;label for=&quot;cemail&quot;&gt;E-Mail *&lt;/label&gt; &lt;input id=&quot;cemail&quot; name=&quot;email&quot; data-rule-required=&quot;true&quot; data-rule-email=&quot;true&quot; data-msg-required=&quot;Please enter your email address&quot; data-msg-email=&quot;Please enter a valid email address&quot;&gt; &lt;/p&gt; &lt;p&gt; &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/p&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/div&gt; &lt;script&gt; $(document).ready(function() { $(&quot;#commentForm&quot;).validate(); }); &lt;/script&gt; validate()验证方法的选项选项名称描述说明debug设置是否为调试模式，如果为调试模式表单不会被提交。submitHandler表单提交时的回调函数，一般用于提交当前表单。rules设置表单元素的验证规则，格式为key:value。messages设置表单元素验证不通过时的错误提示信息。errorClass自定义错误提示信息的样式。ignore设置哪些表单元素不进行验证。 validation自定义验证 $().validate(options) rules 自定义的验证规则 key 要验证的表单元素的name属性值 value 指定使用的验证规则名称 rules : { email:true, //输入正确的email格式 number:true, //输入合法的数字 } equalTo : “相同内容的id” messages 自定义的错误提示 messages : { key : &apos; value &apos; } 自定义错误提示的显示位置(单选和多选框) 自定义的错误提示默认出现在第一个被验证的元素后面 自定义的错误提示应该出现在一组验证元素的后面 自定义了用于显示错误提示信息的标签 &lt;label for=&quot;&quot; class=&quot;error&quot;&gt;&lt;/label&gt; class 插件底层的错误提示信息的样式 for 告知插件当前错误提示信息与哪个指定的验证元素相关 自定义验证方法jQuery.validator.addMethod( name, method [, message ] )方法 name：设置验证方法的名称。 method：回调函数，function(value,element,param){} value：元素的值 element：元素本身 param：参数 message：设置验证不通过的错误提示信息。 jQuery UIjQuery UI能做的事可谓是包罗万象。实际上，jQuery UI在某种意义上并不是插件，而是一个完整的插件库。 jQuery UI中主要包含以下几个功能： Effect（效果） Interactions（交互组件） Widget（部件） 此外，还为jQuery和核心动画提供了很多高级效果。 使用 引入ui – jquery-ui.js 引入themes – base – jquery-ui.css / imagse(同级目录) 引入demos – demos.css Effect（效果）animate( )方法文档在引入核心效果文件的情况下，扩展的.animate()方法可接受另外一些样式属性。 扩展后animate方法接受以下属性： backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor Color outlineColor var state = true; $( &quot;#button&quot; ).click(function() { if ( state ) { $( &quot;#effect&quot; ).animate({ backgroundColor: &quot;#aa0000&quot;, color: &quot;#fff&quot;, width: 500 }, 1000 ); } else { $( &quot;#effect&quot; ).animate({ backgroundColor: &quot;#fff&quot;, color: &quot;#000&quot;, width: 240 }, 1000 ); } state = !state; }); effect( )方法 扩展后animate()方法接受以下属性： backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor Color outlineColor Interactions（交互组件）Draggable Widget $( “#draggable” ).draggable(); start：当拖动开始时触发。 drag：当鼠标在拖动过程中移动时触发。 stop：当拖动停止时触发。 draggable()的选项 约束运动 axis：设置只能在x轴或y轴方向拖动。 containment：设置在某个区域内拖动。 光标样式 cursor：设置拖动时鼠标的样式。 cursorAt：设置鼠标的相对定位。 handle：设置指定元素触发鼠标按下事件才能拖动。 cancel：防止在指定元素上拖动。 revert：当停止拖动时，元素是否被重置到初始位置。 snap：拖动元素是否吸附在其他元素。 snapMode：设置拖动元素吸附指定元素的哪个边缘。 snap设置为true时该选项有效。 inner|outer|both$( &quot;&quot; ).draggable({ snap: &quot;#id&quot;, snapMode: &quot;outer&quot; }); Draggable Widget允许使用鼠标移动元素。 &lt;div id=&quot;draggable&quot; class=&quot;ui-widget-content&quot;&gt; &lt;p&gt;Drag me around&lt;/p&gt; &lt;/div&gt; &lt;script&gt; $( &quot;#draggable&quot; ).draggable(); &lt;/script&gt; Droppable Widget为可拖拽小部件创建目标。 droppable()的事件 drop：该事件在被允许拖放的元素覆盖时触发。 droppable()的选项 accept：指定可拖动的元素可被接受。 activeClass：被允许拖放的元素覆盖时，改变样式。 hoverClass：被允许拖放的元素悬停时，改变样式。 jQuery UI Resizeable 缩放效果 使用鼠标改变元素的尺寸 $( &quot;#resizable&quot; ).resizable(); jQuery UI selectable 元素选择效果 使用鼠标选择单个元素或一组元素 $( &quot;#selectable&quot; ).selectable(); jQuery UI Sortable 排序效果 使用鼠标调整列表中或者网格中元素的排序 $( &quot;#sortable&quot; ).sortable(); Widget (部件)jQuery UI Accordion 折叠面板效果 在一个有限的空间内显示用于呈现信息的可折叠的内容面板。 $( &quot;#accordion&quot; ).accordion(); 需要注意的是： 使用&lt;div&gt;元素作为折叠面板的容器。 使用&lt;h3&gt;元素作为折叠面板的标题。 使用&lt;div&gt;元素作为折叠面板的内容。 jQuery UI Autocomlete 自动检索 根据用户输入值进行搜索和过滤，让用户快速找到并从预设值列表中选择。 $( &quot;#autocomlete&quot; ).autocomlete(); jQuery UI Button 按钮效果 在一个有限的空间内显示用于呈现信息的可折叠的内容面板。 $( &quot;#button&quot; ).button(); jQuery UI Datepicker 日历选择器 Datepicker Widget从弹出框或在线日历选择一个日期。 &lt;p&gt;Date: &lt;input type=&quot;text&quot; id=&quot;datepicker&quot;&gt;&lt;/p&gt; &lt;script&gt; $( &quot;#datepicker&quot; ).datepicker(); &lt;/script&gt; jQuery UI Dialog对话框Dialog Widget在一个交互覆盖层中打开内容。 基本对话框示例 &lt;div id=&quot;dialog&quot; title=&quot;Basic dialog&quot;&gt; &lt;p&gt;This is the default dialog which is useful for displaying information. The dialog window can be moved, resized and closed with the &apos;x&apos; icon.&lt;/p&gt; &lt;/div&gt; &lt;script&gt; $( &quot;#dialog&quot; ).dialog(); &lt;/script&gt; 模式对话框示例 &lt;div id=&quot;dialog-modal&quot; title=&quot;Basic modal dialog&quot;&gt; &lt;p&gt;Adding the modal overlay screen makes the dialog look more prominent because it dims out the page content.&lt;/p&gt; &lt;/div&gt; &lt;script&gt; $( &quot;#dialog-modal&quot; ).dialog({ modal: true }); &lt;/script&gt; 操作对话框示例 &lt;div id=&quot;dialog&quot; title=&quot;Basic dialog&quot;&gt; &lt;p&gt;This is an animated dialog which is useful for displaying information. The dialog window can be moved, resized and closed with the &apos;x&apos; icon.&lt;/p&gt; &lt;/div&gt; &lt;button id=&quot;opener&quot;&gt;Open Dialog&lt;/button&gt; &lt;script&gt; $( &quot;#dialog&quot; ).dialog({ autoOpen: false, show: { effect: &quot;blind&quot;, duration: 1000 }, hide: { effect: &quot;explode&quot;, duration: 1000 }, buttons : { &quot;OK&quot;: function() { $( this ).dialog( &quot;close&quot; ); }, Cancel: function() { $( this ).dialog( &quot;close&quot; ); } } }); $( &quot;#opener&quot; ).button().click(function() { $( &quot;#dialog&quot; ).dialog( &quot;open&quot; ); }); &lt;/script&gt; jQuery UI Tabs页签 Tabs Widget是一种多面板的单内容区，每个面板与列表中的标题相关。 $( &quot;#tabs&quot; ).tabs(); Tooltip Widget Tooltip Widget可自定义的、可主题化的工具提示框，替代原生的工具提示框。 &lt;p&gt; &lt;label for=&quot;age&quot;&gt;Your age:&lt;/label&gt; &lt;input id=&quot;age&quot; title=&quot;We ask for your purposes.&quot;&gt; &lt;/p&gt; &lt;script&gt; $( document ).tooltip(); &lt;/script&gt; jQuery UI Menu 菜单 带有鼠标和键盘交互的用于导航的可主题化菜单 $( &quot;#menu&quot; ).menu(); jQuery UI Progressbar 进度条 显示一个确定的或不确定的进程状态 $( &quot;#progressbar&quot; ).progressbar({}); jQuery UI Slider 滑块 滑槽滑块 $( &quot;#slider&quot; ).slider(); jQuery UI tab键提示信息 悬停在链接上，或者使用 tab 键循环切换聚焦在每个元素上。 $( document ).tooltip(); jQuery UI Spinner 旋转器 通过向上/向下按钮和箭头键处理，为输入数值增强文本输入功能。 $( &#39;#spinner&#39;).spinner(); Menu WidgetMenu Widget带有鼠标和键盘交互的用于导航的可主题化菜单。 禁用页面中默认的鼠标右键功能。 $(document).contextmenu(function (event) { event.preventDefault(); }); 自定义鼠标右键菜单。 $(document).mousedown(function (event) { if(event.button == 2){ $( &quot;#menu&quot;).removeAttr(&quot;style&quot;).menu().position({ my: &quot;left top&quot;, at: &quot;left top&quot;, of : event, collision: &quot;fit&quot; }); } });]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery(一)]]></title>
    <url>%2F2017%2F08%2F04%2FjQuery-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[jQuery入门JavaScript类库 作用：JavaScript类库的出现，就是为了简化JavaScript的开发。 内容：JavaScript类库封装了预定义的对象和函数。 目的：帮助开发人员建立有高难度交互的Web 2.0特性的富客户端页面，并且兼容各大浏览器。 扩展内容Web 2.0相关概念： Web 1.0：网络 -&gt; 人（单向信息。网络是信息提供者，单向的提供和单一理解） Web 2.0：人 -&gt; 人（以网络为沟通渠道进行人与人沟通。网络是平台，用户提供信息，通过网络，其他用户获取信息） Web 3.0：人 -&gt; 网络 -&gt; 人（人与网络之间的双向沟通。网络成为用户需求理解者和提供者） 富客户端与瘦客户端： 富客户端：（Rich Internet Applications，RIA）利用具有很强交互性的富客户端技术来为用户提供一个更高和更全方位的网络体验。 瘦客户端：（Thin Client）指的是在客户端-服务器网络体系中的一个基本无需应用程序的计算机终端。 jQuery的编程步骤 在HTML页面引入jQuery文件 &lt;!-- 1\. 引入jQuery文件 --&gt; &lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt; 在HTML页面定义元素 &lt;!-- 定义HTML页面元素 --&gt; &lt;input type=&quot;text&quot; value=&quot;请输入你的用户名&quot; id=&quot;username&quot;&gt; 使用jQuery的选择器定位元素 // 2. 使用jQuery选择器定位HTML页面元素 var $username = $(&quot;#username&quot;); 利用jQuery提供的API完成需求 // 3. 调用jQuery的API方法 console.log($username.val()); jQuery基础内容jQuery工厂函数jQuery的工厂函数算做是jQuery的一个入口，通过它既可以使用选择器，也可以包装DOM对象，还可以创建元素等功能。 工厂函数的写法有两种： 第一种是$( ) 第二种是jQuery( ) 这里的”$”符号就表示jQuery，是jQuery的一个约定。不仅如此，jQuery也建议通过jQuery获取的元素变量前都增加”$”符号。目前有很多JS库都效仿了jQuery的这种做法，当然也引起了多个使用””的JS库一起使用时的一些冲突，主要还是集中在”$”的使用权上。 jQuery对象与DOM对象 DOM对象 定义：是指通过DOM获取的元素。 jQuery对象 定义：是通过包装DOM对象后产生的一种对象（jQuery自定义的全局对象）。 可以说jQuery底层其实还是DOM对象。 注意：jQuery是类数组对象，所以jQuery对象中可能包含多个DOM对象或一个DOM对象，这要看具体情况。 DOM对象转换为jQuery对象 DOM对象要想转换为jQuery对象，需要使用jQuery的工厂函数 $( ) 将其包裹，返回的就是对应的jQuery对象。 // DOM对象 var username = document.getElementById(&quot;username&quot;); // DOM对象转换为jQuery对象 var $username = $(username); // 测试 console.log($username.val()); jQuery对象转换为DOM对象 jQuery对象是数组对象。jQuery对象[索引值]可以直接转换为对应的DOM对象 // jQuery对象 var $user = $(&quot;#username&quot;); // 1\. jQuery对象是数组对象 var user1 = $user[0]; // 测试 console.log(user1.value); jQuery提供了get(index)方法。jQuery对象.get(索引值)也可以转换为对应的DOM对象 // jQuery对象 var $user = $(&quot;#username&quot;); // 2\. jQuery提供get(index)方法进行转换 var user2 = $user.get(0); // 测试 console.log(user2.value); jQuery选择器jQuery的选择器的想法是源于CSS中的选择器的用法，其实在JavaScript中也有类似的用法，比如querySelector( )或querySelectorAll( )方法的使用，也是借助CSS中的选择器来定位HTML页面元素的。只不过相比jQuery中的选择器，JavaScript中的querySelector( )或querySelectorAll( )方法的性能相对差一些而已。 jQuery的选择器最主要的作用就是用于定位HTML页面的元素。它不仅可以定位HTML页面中具体某个元素，还可以通过各种方式定位复合条件的一组元素等等。 jQuery的选择器最大的特点就是将定位元素和元素行为进行了有效的分离。这是在实际开发中非常必要的一项特点！ jQuery选择器的种类jQuery中使用其工厂函数 $( ) 作为容器，来接收jQuery的选择器内容。而jQuery的选择器则以字符串形式传递给jQuery的工厂函数。jQuery的选择器种类大概可以分为以下几种： 基本选择器// 通过元素的 id 属性值获取 $(&apos;#btn1&apos;).click(function(){ $(&apos;#one&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); // 选取带有指定class属性值 $(&apos;#btn2&apos;).click(function(){ $(&apos;.mini&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); // 选择元素名 element 的元素 $(&apos;#btn3&apos;).click(function(){ $(&apos;div&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); //选择所有元素 (多用于上下文搜索) $(&apos;#btn4&apos;).click(function(){ $(&apos;*&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); //并集选择器 $(&apos;#btn5&apos;).click(function(){ $(&apos;span,#two&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); 需要注意 通配符选择器（*）默认匹配HTML页面中所有的元素。 复合选择器（多个选择器并列使用）的使用，每个选择器之间使用”,”进行分割。并且复合选择器匹配的结果是多个选择器的并集效果。 层级选择器//选择祖先元素下所有的后代元素 $(&apos;#btn1&apos;).click(function(){ $(&apos;body div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选择父元素下匹配的所有子元素 $(&apos;#btn2&apos;).click(function(){ $(&apos;body &gt; div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选取紧接某元素后的下一个元素 $(&apos;#btn3&apos;).click(function(){ $(&apos;.one + div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选取某元素后的所有兄弟元素 $(&apos;#btn4&apos;).click(function(){ $(&apos;#two ~ div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) 需要注意 selectors~selector2选择器，是获取符合selector1选择器的元素后面所有符合selector2选择器的兄弟元素。jQuery中还有一个方法siblings( )，是获取指定元素的所有兄弟元素。 基本过滤选择器//获取第一个元素 $(&apos;#btn1&apos;).click(function(){ $(&apos;div:first&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //获取最后一个元素 $(&apos;#btn2&apos;).click(function(){ $(&apos;div:last&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //去除所有与选定选择器匹配的元素 //选择class不为one的 所有div元素. $(&apos;#btn3&apos;).click(function(){ $(&apos;div:not(.one)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //获取索引值为偶数的. 从0开始计数 $(&apos;#btn4&apos;).click(function(){ $(&apos;div:even&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //获取索引值为奇数的. 从0开始计数 $(&apos;#btn5&apos;).click(function(){ $(&apos;div:odd&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //选取指定索引值的元素 从0开始计数 $(&apos;#btn6&apos;).click(function(){ $(&apos;div:eq(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //选取所有大于指定索引值的元素 great than $(&apos;#btn7&apos;).click(function(){ $(&apos;div:gt(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //选取所有小于指定索引值的元素 less than $(&apos;#btn8&apos;).click(function(){ $(&apos;div:lt(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //选择 所有的标题元素.比如h1, h2, h3等等... $(&apos;#btn9&apos;).click(function(){ $(&apos;:header&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }) //选择 当前正在执行动画的所有元素. $(&apos;#btn10&apos;).click(function(){ $(&apos;:animated&apos;).css(&quot;background&quot;,&quot;#bfa&quot;); }); 需要注意 “:not(selector)”选择器，不仅可以匹配到class属性值不是one的元素，还匹配到没有class属性的元素。这不仅仅只是一个反操作的过程。 “:even”和”:odd”选择器，表示索引值为偶数或者索引值为奇数的元素，但是需要注意的是索引值是从 0 开始的。 :header”选择器，是匹配 h1 - h6 标题元素，并不能匹配指定的某个标题元素。如果需要匹配具体某个标题元素可以使用元素选择器，所以这种用法在实际开发中很少见到。 “:animated”选择器，是匹配正在执行动画效果的元素，但需要注意的是它只能匹配jQuery执行的动画效果，而不能匹配其他技术实现的动画效果。 内容过滤选择器//查找包含某个文本的元素 $(&apos;#btn1&apos;).click(function(){ $(&apos;div:contains(di)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选取所有不包含子元素或者文本的空元素 $(&apos;#btn2&apos;).click(function(){ $(&apos;div:empty&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选取含有子元素或者文本的元素 $(&apos;#btn3&apos;).click(function(){ $(&apos;div:has(.mini)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //指定目标前的指定父元素 $(&apos;#btn4&apos;).click(function(){ $(&apos;div:parent&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) 需要注意 “:has(selector)”选择器，匹配含有符合selector选择器元素的元素，并不是匹配符合selector的元素。 可见性过滤选择器//获取所有不可见元素，或者type为hidden的元素 $(&apos;#btn_hidden&apos;).click(function(){ $(&apos;div:hidden&apos;).show(3000).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //选取所有可见的元素. $(&apos;#btn_visible&apos;).click(function(){ $(&apos;div:visible&apos;).css(&quot;background&quot;,&quot;#FF6500&quot;); }) 需要注意 show( )方法表示将隐藏的元素显示，其参数表示动画执行的时长。（后面的内容会详细讲到）。 属性过滤选择器//获取含有属性名的元素 $(&apos;#btn1&apos;).click(function(){ $(&apos;div[title]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //[attribute=value] 获取属性等于某个属性值的元素 $(&apos;#btn2&apos;).click(function(){ $(&apos;div[title=test]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) // [attribute!=value] 获取属性不等于某个属性值的元素 $(&apos;#btn3&apos;).click(function(){ $(&apos;div[title!=test]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //[attribute^=value] 获取属性以某些值开头的元素 $(&apos;#btn4&apos;).click(function(){ $(&apos;div[title^=te]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //[attribute$=value] 获取属性以某些值结尾的元素 $(&apos;#btn5&apos;).click(function(){ $(&quot;div[title$=est]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //[attribute*=value] 获取属性包含某些值的元素 $(&apos;#btn6&apos;).click(function(){ $(&quot;div[title*=es]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //[selector1][selector2][selectorN] 交集选择器 //需要同时满足多个条件时使用 $(&apos;#btn7&apos;).click(function(){ $(&quot;div[id][title*=es]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) 需要注意 “[attrName!=value]”选择器，匹配attrName属性的值不等于value的元素，但也包含没有attrName属性的所有元素。 “[attribute][attribute]”属性复合选择器，是多个属性过滤选择器并列使用，匹配的结果是多个属性过滤选择器的交集。 子元素过滤选择器//:nth-child( index )选取父元素下的第N个子或奇偶元素 index 从 1 开始 $(&apos;#btn1&apos;).click(function(){ $(&apos;div.one :nth-child(2)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //:first-child 父元素下的第一个子元素 $(&apos;#btn2&apos;).click(function(){ $(&apos;div.one :first-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //:last-child 父元素下的最后一个子元素 $(&apos;#btn3&apos;).click(function(){ $(&apos;div.one :last-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) //:only-child 选取某个元素是父元素中唯一的子元素 $(&apos;#btn4&apos;).click(function(){ $(&apos;div.one :only-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;); }) 需要注意 子元素过滤选择器的特殊用法，就是在其前面需要增加空格。不然子元素过滤选择器将不会有效果！ “nth-child(index)”选择器中的index是从 0 开始的。 表单对象属性过滤选择器//:enabled 获取所有input元素 $(&apos;#btn1&apos;).click(function(){ $(&quot;#form1 input:enabled&quot;).val(&quot;这里变化了！&quot;); return false; }) //:disabled 获取所有不可用input元素 $(&apos;#btn2&apos;).click(function(){ $(&quot;#form1 input:disabled&quot;).val(&quot;这里变化了！&quot;); return false; }) //:checked 获取所有选中框元素(单选框, 复选框) $(&quot;:checkbox&quot;).click(countChecked); function countChecked() { var n = $(&quot;input:checked&quot;).length; $(&quot;div&quot;).eq(0).html(&quot;&lt;strong&gt;有&quot;+n+&quot; 个被选中!&lt;/strong&gt;&quot;); } //:selected 获取所有选中的option元素 $(&quot;select&quot;).change(function () { var str = &quot;&quot;; $(&quot;select :selected&quot;).each(function () { str += $(this).text() + &quot;,&quot;; }); $(&quot;div&quot;).eq(1).html(&quot;&lt;strong&gt;你选中的是：&quot;+str+&quot;&lt;/strong&gt;&quot;); }) 需要注意 “:checked”选择器，匹配checkbox和radio元素中被选中的。 “:selected”选择器，匹配select元素中option元素被选中的。 表单选择器var $alltext = $(&quot;#form1 :text&quot;); var $allpassword= $(&quot;#form1 :password&quot;); var $allradio= $(&quot;#form1 :radio&quot;); var $allcheckbox= $(&quot;#form1 :checkbox&quot;); var $allsubmit= $(&quot;#form1 :submit&quot;); var $allimage= $(&quot;#form1 :image&quot;); var $allreset= $(&quot;#form1 :reset&quot;); var $allbutton= $(&quot;#form1 :button&quot;); // &lt;input type=button /&gt; 和 &lt;button &gt;&lt;/button&gt;都可以匹配 var $allfile= $(&quot;#form1 :file&quot;); var $allhidden= $(&quot;#form1 :hidden&quot;); // &lt;input type=&quot;hidden&quot; /&gt;和&lt;div style=&quot;display:none&quot;&gt;test&lt;/div&gt;都可以匹配. var $allselect = $(&quot;#form1 select&quot;); var $alltextarea = $(&quot;#form1 textarea&quot;); var $AllInputs = $(&quot;#form1 :input&quot;); var $inputs = $(&quot;#form1 input&quot;); $(&quot;div&quot;).append(&quot; 有&quot; + $alltext.length + &quot; 个（ :text 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allpassword.length + &quot; 个（ :password 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allradio.length + &quot; 个（ :radio 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allcheckbox.length + &quot; 个（ :checkbox 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allsubmit.length + &quot; 个（ :submit 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allimage.length + &quot; 个（ :image 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allreset.length + &quot; 个（ :reset 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allbutton.length + &quot; 个（ :button 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allfile.length + &quot; 个（ :file 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allhidden.length + &quot; 个（ :hidden 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $allselect.length + &quot; 个（ select 元素）&lt;br/&gt;&quot;) .append(&quot; 有&quot; + $alltextarea.length + &quot; 个（ textarea 元素）&lt;br/&gt;&quot;) .append(&quot; 表单有 &quot; + $inputs.length + &quot; 个（input）元素。&lt;br/&gt;&quot;) .append(&quot; 总共有 &quot; + $AllInputs.length + &quot; 个(:input)元素。&lt;br/&gt;&quot;) .css(&quot;color&quot;, &quot;red&quot;) $(&quot;form&quot;).submit(function () { return false; }); // return false;不能提交. jQuery的DOM操作DOM是Document Object Model的缩写，译为文档对象模型。根据W3C DOM规范，DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松地访问页面中所有的标准组件。 jQuery中另一个重要的组成部分就是封装了原生DOM的操作。 html操作html( )方法用于读取或设置指定元素的HTML代码，类似于原生DOM中的innerHTML属性。 //获取&lt;p&gt;元素的HTML代码 $(&quot;input:eq(0)&quot;).click(function(){ alert( $(&quot;p&quot;).html() ); }); //设置&lt;p&gt;元素的HTML代码 $(&quot;input:eq(1)&quot;).click(function(){ $(&quot;p&quot;).html(&quot;&lt;strong&gt;你最讨厌的水果是?&lt;/strong&gt;&quot;); }); 文本操作text( )方法用于读取或设置指定元素的文本内容，类似于原生DOM中的textContent属性。 //获取&lt;p&gt;元素的文本 $(&quot;input:eq(0)&quot;).click(function(){ alert( $(&quot;p&quot;).text() ); }); //设置&lt;p&gt;元素的文本 $(&quot;input:eq(1)&quot;).click(function(){ $(&quot;p&quot;).text(&quot;你最讨厌的水果是?&quot;); }); 值操作val( )方法用于读取或设置指定元素的value属性值，类似于原生DOM中的value属性。 //获取按钮的value值 $(&quot;input:eq(0)&quot;).click(function(){ alert( $(this).val() ); }); //设置按钮的value值 $(&quot;input:eq(1)&quot;).click(function(){ $(this).val(&quot;我被点击了!&quot;); }); 属性操作 attr( )方法用于获取或设置指定元素的属性，类似于原生DOM中的getAttribute()方法和setAttribute()方法。 removeAttr( )方法用于删除指定元素的属性，类似于原生DOM中的removeAttribute()方法。 //设置&lt;p&gt;元素的属性&apos;title&apos; $(&quot;input:eq(0)&quot;).click(function(){ $(&quot;p&quot;).attr(&quot;title&quot;,&quot;选择你最喜欢的水果.&quot;); }); //获取&lt;p&gt;元素的属性&apos;title&apos; $(&quot;input:eq(1)&quot;).click(function(){ alert( $(&quot;p&quot;).attr(&quot;title&quot;) ); }); //删除&lt;p&gt;元素的属性&apos;title&apos; $(&quot;input:eq(2)&quot;).click(function(){ $(&quot;p&quot;).removeAttr(&quot;title&quot;); }); 样式操作操作样式主要分成两种： 一种是使用style属性直接设置CSS中的属性 一种是使用class样式名称设置CSS。 attr( )方法操作class本身就是元素中的一个属性，所以也可以使用设置属性方式来设置或删除class样式。 语法结构：element.attr(&quot;class&quot;,className) 值得注意的是：使用attr( )方法设置class样式时，无论之前是否包含class属性，之前设置的样式都会被覆盖。 //&lt;input type=&quot;button&quot; value=&quot;采用属性增加样式&quot; id=&quot;b1&quot;/&gt; $(&quot;#b1&quot;).click(function(){ $(&quot;#mover&quot;).attr(&quot;class&quot;,&quot;one&quot;); }) addClass( )方法操作addClass( )方法表示追加样式，也就是说，无论之前是否包含class样式，调用addClass( )方法只是在其基础上增加一个新的样式。而之前设置的样式依旧存在。 //&lt;input type=&quot;button&quot; value=&quot; addClass&quot; id=&quot;b2&quot;/&gt; $(&quot;#b2&quot;).click(function(){ $(&quot;#mover&quot;).addClass(&quot;mini&quot;); }) removeClass( )方法操作removeClass( )方法表示删除样式，但该方法的使用有以下三种方式： removeClass()，默认不传递任何参数，表示删除所有样式。 removeClass(className)，传递一个样式名称，表示删除指定一个样式。 removeClass(className1 className2),传递多个样式名称，中间使用空格隔开，表示删除指定多个样式。 //&lt;input type=&quot;button&quot; value=&quot;removeClass&quot; id=&quot;b3&quot;/&gt; $(&quot;#b3&quot;).click(function(){ $(&quot;#mover&quot;).removeClass(); }) toggleClass( )方法操作toggleClass( )方法表示在没有样式与指定样式之间进行切换，效果相当于使用addClass()方法和removeClass()方法。 //&lt;input type=&quot;button&quot; value=&quot; 切换样式&quot; id=&quot;b4&quot;/&gt; $(&quot;#b4&quot;).click(function(){ // 在没有样式与指定样式之间切换 $(&quot;#mover&quot;).toggleClass(&quot;one&quot;); }) hasClass( )方法操作hasClass( )方法表示指定元素是否包含指定样式。 值得注意的是：hasClass( )方法并不能判断是否包含样式，而是判断是否包含指定样式。 //&lt;input type=&quot;button&quot; value=&quot; hasClass&quot; id=&quot;b5&quot;/&gt; $(&quot;#b5&quot;).click(function(){ // 判断是否含有某个指定样式 alert($(&quot;#mover&quot;).hasClass(&quot;one&quot;)); }) css( )方法操作css( )方法也可以获取或设置CSS样式，但并不是通过class属性，而是通过style属性直接设置CSS中的属性。 获取样式： css(attrName)方法，用于获取当前style属性的值。 设置样式： css(attrName,attrValue)方法，用于设置当前style属性的值。但每次只能设置一个CSS中的属性。 css({attrName:attrValue,attrName:attrValue,…})方法，用于设置当前style属性的值。每次可以设置多个CSS中的属性。 遍历节点获取父元素parent( )方法可以获取指定元素的父元素。 parent()方法，不传递任何参数，是获取指定元素的父元素。 parent(selector)方法，是获取指定元素的符合selector选择器的父元素。 //第一个&lt;li&gt;元素的父元素 var $parent = $(&quot;li:first&quot;).parent(); 获取子元素children( )方法可以获取指定元素的子元素。 children()方法，不传递任何参数，可以获取指定元素的所有子元素。 children(selector)方法，是获取指定元素的符合selector选择器的子元素。 var $ul = $(&quot;ul&quot;).children(); alert( $ul.length );//&lt;p&gt;元素下有3个子元素 获取兄弟元素 next( )方法是获取指定元素的下一个兄弟元素。 next()方法，不传递任何参数，是获取指定元素的下一个兄弟元素。 next(selector)方法，是获取指定元素符合selector选择器的下一个兄弟元素。 var $p1 = $(&quot;p&quot;).next(); alert( $p1.html() ); // 紧邻&lt;p&gt;元素后的同辈元素 prev( )方法是获取指定元素的上一个兄弟元素。 prev( )方法，不传递任何参数，是获取指定元素的上一个兄弟元素。 prev(selector)方法，是获取指定元素符合selector选择器的上一个兄弟元素。 var $ul = $(&quot;ul&quot;).prev(); alert( $ul.html() ); // 紧邻&lt;ul&gt;元素前的同辈元素 siblings( )方法是获取指定元素的所有兄弟元素。 siblings( )方法，不传递任何参数，是获取指定元素的所有兄弟元素。 siblings(selector)方法，是获取指定元素符合selector选择器的所有兄弟元素。 var $p2 = $(&quot;p&quot;).siblings(); alert( $p2.html() ); // 紧邻&lt;p&gt;元素的唯一同辈元素 查找指定后代元素find(selector)方法，可以查找指定元素的符合selector选择器的后代元素。 var eles = $(&quot;ul&quot;).find(&quot;li&quot;); //查找ul元素下的所有li元素 其他操作创建操作按照原生DOM的思路，创建节点需要分别创建元素节点、文本节点和属性节点。 元素节点，使用jQuery的工厂函数 $(HTML代码)来创建。 文本节点，使用jQuery的text( )方法进行设置文本，而不需要创建文本节点。 属性节点，使用jQuery的attr( )方法进行设置属性，而不需要创建属性节点。 其实，使用jQuery创建元素，并不需要按照原生DOM的思路进行创建。可以一步代码创建完整的元素。 //创建一个&lt;li&gt;元素 包括元素节点,文本节点和属性节点 var $li = $(&quot;&lt;li title=&apos;香蕉&apos;&gt;香蕉&lt;/li&gt;&quot;); // 获取&lt;ul&gt;节点 &lt;li&gt;的父节点 var $parent = $(&quot;ul&quot;); // 添加到&lt;ul&gt;节点中，使之能在网页中显示 $parent.append($li); 插入操作jQuery中的插入操作分为内部插入和外部插入。 内部插入 append( )方法，将append( )后面的元素插入在append( )前面指定元素的后面。 prepend( )方法，将prepend( )后面的元素插入在prepend( )前面指定元素的前面。 appendTo( )方法，将appendTo( )前面的元素插入在appendTo( )后面的元素的后面。 prependTo( )方法，将prependTo( )前面的元素插入在prependTo( )后面的元素的前面。 // append - append后面的节点被添加到append前面的节点的后面 $(&quot;#tj&quot;).append($(&quot;#ms&quot;)); // prepend - prepend后面的节点被添加到prepend前面的节点的前面 $(&quot;#tj&quot;).prepend($(&quot;#ms&quot;)); // appendTo - appendTo前面的节点被添加到appendTo后面的节点的后面 $(&quot;#tj&quot;).appendTo($(&quot;#ms&quot;)); // prependTo - prependTo前面的节点被添加到prependTo后面的节点的前面 $(&quot;#tj&quot;).prependTo($(&quot;#ms&quot;)); 外部插入 before( )方法，将before( )后面的元素插入在before( )前面的指定元素的前面。 after( )方法，将after( )后面的元素插入在after( )前面的指定元素的后面。 insertBefore( )方法，将insertBefore( )前面的元素插入在insertBefore( )后面的指定元素的前面。 insertAfter( )方法，将insertAfter( )前面的元素插入在insertAfter( )后面的指定元素的后面。 // before - before后面的节点被添加到before前面的节点的前面 $(&quot;#tj&quot;).before($(&quot;#ms&quot;)); // after - after后面的节点被添加到after前面的节点的后面 $(&quot;#tj&quot;).after($(&quot;#ms&quot;)); // insertBefore $(&quot;#tj&quot;).insertBefore($(&quot;#ms&quot;)); // insertAfter $(&quot;#tj&quot;).insertAfter($(&quot;#ms&quot;)); 删除操作jQuery中的删除操作分别为remove( )方法和empty( )方法。 remove( )方法，删除自身元素及所有后代元素。 empty( )方法，删除所有后代元素，但保留自身元素。该方法适合完成清空操作。 $(&quot;ul li:eq(1)&quot;).remove(); // 获取第二个&lt;li&gt;元素节点后，将它从网页中删除 $(&quot;ul li&quot;).remove(&quot;li[title!=菠萝]&quot;); //把&lt;li&gt;元素中属性title不等于&quot;菠萝&quot;的&lt;li&gt;元素删除 $(&quot;ul li:eq(1)&quot;).empty(); // 获取第二个&lt;li&gt;元素节点后，清空此元素里的内容 替换操作jQuery中的替换操作分别为replaceWith( )方法和replaceAll( )方法。 replaceWith( )方法，该方法前面的元素是被替换元素。 replaceAll( )方法，就是颠倒了的repalceWith( )方法。 $(&quot;p&quot;).replaceWith(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;); // 同样的实现： $(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;).replaceAll(&quot;p&quot;); 复制操作jQuery中的复制操作使用的方法为clone( )方法，该方法与原生DOM中的复制节点的方法cloneNode( )在使用时极为相似。 原生DOM中的cloneNode(Boolean)方法，参数Boolean表示是否复制后代节点。 jQuery中的clone(Boolean)方法，参数Boolean表示是否复制事件。 $(&quot;ul li&quot;).click(function(){ $(this).clone().appendTo(&quot;ul&quot;); // 复制当前点击的节点，并将它追加到&lt;ul&gt;元素 $(this).clone(true).appendTo(&quot;ul&quot;); // 注意参数true //可以复制自己，并且他的副本也有同样功能 })]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[this关键字解析]]></title>
    <url>%2F2017%2F08%2F02%2Fthis%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[默认绑定独立函数调用,如果使用了非严格模式,this会绑定到全局对象(window) function foo(){ console.log(this.a); } var a = 2; foo(); // 2 (function(){ &quot;use strict&quot; foo(); // 2 })(); 独立函数调用,如果使用严格模式(strict mode),this 会绑定到undefined: function foo() { &quot;use strict&quot;; console.log( this.a ); } var a = 2; foo(); //报错!property &apos;a&apos; of undefined at foo 这里有一个微妙但是非常重要的细节,虽然this的绑定规则完全取决于调用位置.但是只有foo()运行在非strict mode下时,默认绑定才能绑定到全局对象严格模式下调用foo()不会影响默认绑定规则 function foo() { console.log( this.a ); } var a = 2; (function(){ &quot;use strict&quot;; foo(); //2 })(); 隐式绑定隐式绑定的规则是调用位置是否有上下文对象,或者说是否被某个对象拥有或者包含当函数引用有上下文对象时,隐式绑定规则会把函数调用中的this绑定到这个上下文对象 function foo() { console.log( this.a ); } var obj = { a: 2, foo: foo }; obj.foo(); //2 对象属性引用链中只有最顶层或者说最后一层会影响调用位置 function foo() { console.log( this.a ); } var obj2 = { a: 42, foo: foo }; var obj1 = { a: 2, obj2: obj2 }; obj1.obj2.foo(); //42 //这里的最顶层或最后一层指的是obj2 隐式丢失一个最常见的 this 绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把 this 绑定到全局对象或者 undefined 上，取决于是否是严格模式。 function foo() { console.log( this.a ); } var a = &quot;oops, global&quot;; var obj = { a: 2, foo: foo }; var bar = obj.foo; bar(); // oops, globa 参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值: function foo() { console.log( this.a ); } function doFoo(fn) { fn(); } var a = &quot;oops, global&quot;; var obj = { a: 2, foo: foo }; doFoo( obj.foo ); // oops, global 如果把函数传入语言内置的函数而不是传入你自己声明的函数，结果是一样的，没有区别JavaScript环境中内置的 setTimeout() 函数实现和下面的伪代码类似： function setTimeout(fn,delay) { // 等待delay毫秒 fn(); // &lt;-- 调用位置！ } function foo() { console.log( this.a ); } var a = &quot;oops, global&quot;; var obj = { a: 2, foo: foo }; setTimeout( obj.foo, 1000 ); // oops, global\ 下文会说怎么解决隐式丢失的问题. 显示绑定我们不想在对象内部包含函数引用(在对象外声明一个函数,在对象里边调用这个函数)，而想在某个对象上强制调用函数(示例)具体点说，可以使用函数的 call(..) 和 apply(..) 方法来实现显示绑定在说显示绑定之前我们先说一下call()和apply() function.apply(thisobj, args) //thsiobj - 调用function的对象.在函数体重,thisobj是关键字this的值 //args - 一个数组,它的元素是传递给函数function的参数值 //返回值 - 调用函数function的返回值 function.call(thisobj, args...) //thisobj - 调用function的对象.在函数主体中,thisobj是关键字this的值 //atgs - 任意多个参数,这些参数将传递给函数function //call()将指定的函数function作为对象thisobj的方法来调用，把参数列 表中thisobj后的参数传递给它，返回值是调用函数后的返回值。在函数体 内，关键字this引用thisobj对象。 普通对象属性查找: function foo(a,b) { console.log( this.a,a,b ); } var obj = { a:2 }; foo.call( obj,&quot;a&quot;,&quot;b&quot;); //2 a b //正常数组 var a=Array.apply(null,{length:3}); console.log(a); a.map(function(v,i){console.log(i)}) //稀疏数组 var b=new Array(3); console.log(b); b.map(function(v,i){console.log(i)}) 硬绑定先给出硬绑定一个小的demo然后再说什么是硬绑定 function foo() { console.log( this.a );/ } var a =1; var obj = { a:2 }; var obj_test = { a:&quot;test&quot; }; var bar = function() { console.log( this.a ); foo.call( obj ); }; bar(); // 1 2 setTimeout( bar, 1000 ); // 1 2 bar.call( obj_test ); //test 2 硬绑定的bar不可能再修改它的this(指的是foo中的this) 我们来看看这个显式绑定变种到底是怎样工作的。我们创建了函数 bar() ，并在它的内部手动调用了 foo.call(obj) ，因此强制把 foo 的 this 绑定到了 obj 。无论之后如何调用函数 bar ，它总会手动在 obj 上调用 foo 。这种绑定是一种显式的强制绑定，因此我们称之为硬绑定。 示例: //硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值 function foo(arg1,arg2) { console.log( this.a,arg1,arg2); return this.a + arg1; } var obj = { a:2 }; var bar = function() { return foo.apply( obj, arguments); }; var b = bar(3,2); // 2 3 2 console.log( b ); // 5 示例: function foo(something,otherthing) { console.log( this.a+&quot; &quot;+ something+&quot; &quot;+ otherthing); return this.a + something; } // 简单的辅助绑定函数 bind函数的作用：返回一个新的函数，并且指定该新函数的this指向 function bind(fn, obj) { return function() { return fn.apply( obj, arguments ); }; } var obj = { a:2 }; var obj_test = { a:22 }; var bar = bind( foo, obj); var b = bar(3); // 2 3 undefined console.log( b ); // 5 bar.call(obj_test,3);//2 3 undefined 硬绑定函数给出一个小demo: document.write(&quot;test&quot;); var altwrite = document.write; altwrite(&quot;hello&quot;); // 报错 TypeError altwrite()函数改变了write的this的指向，让它指向global或window对象，导致执行时提示非法调用异常.以下是解决办法: altwrite.bind(document)(&quot; hello&quot;); // test hello altwrite.call(document, &quot; call&quot;); // test hello altwrite.apply(document, [&quot; apply&quot;]); // test hello altwrite(&quot;hello&quot;); 解决隐式丢失function foo() { console.log( this.a ); } var a = &quot;oops, global&quot;; // a是全局对象的属性 var obj = { a: 2, foo: foo }; var test = obj.foo; test(); var bar = foo.bind(obj); //硬绑定 bar(); // &quot;2&quot; new绑定我们重新定义一下JavaScript中的“构造函数”。JavaScript，构造函数只是一些使用 new 操作符时被调用的函数。 它们并不会属于某个类，也不会实例化一个类。实际上，它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。!!!!!实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用” 使用 new 来调用函数，或者说发生构造函数调用时，对于我们的this来说。这个新对象会绑定到函数调用的 this 。 function foo(a) { this.a = a; } var bar = new foo(2); console.log( bar.a ); // 2 使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定。 绑定例外示例: function foo() { setTimeout(() =&gt; { console.log(&apos;id:&apos;, this.id); }, 100); } var id = 21; foo.call({ id: 42 }) 如果你把null或者undefined作为this的绑定对象传入call、apply或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。 function foo() { console.log( this.a ); } var a = 2222; foo.call( null ); // 2 柯里化给目标函数预绑定一些参数示例: function foo(a,b) { console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b ); } // 把数组“展开”成参数 foo.apply( null, [2, 3] ); // a:2, b:3 // 使用 bind(..) 进行柯里化 var bar = foo.bind( null, [2] ); bar( 3 ); // a:2, b:3 示例: function foo(a,b) { console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b ); } // 我们的DMZ空对象,“DMZ”（demilitarized zone，非军事区） var ø = Object.create( null );//{} // 把数组展开成参数 foo.apply( ø, [2, 3] ); // a:2, b:3 // 使用bind(..)进行柯里化 var bar = foo.bind( ø, 2 ); bar( 3 ); // a:2, b:3]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript高级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一天学会zepto]]></title>
    <url>%2F2017%2F08%2F01%2F%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Ahexo%2F</url>
    <content type="text"><![CDATA[如果你是一个有1-3年工作经验的人相信读完这篇文章你会有所收获,如果你会jquery并且掌握不错的情况下读完此篇文章,那么恭喜你学习了一个框架。 zepto简介- zepto是轻量级的JavaScript库，专门为移动端定制的框架 - 与jquery有着类似的API，俗称：会jquery就会用zepto zepto的特点- 针对移动端 - 轻量级，压缩版本只有8kb左右 - 响应，执行快 - 语法，API大部分同jquery一样，学习难度低，上手快 - 目前API完善的框架中体积最小的一个(没有之一) zepto与jquery的前世今生 相同点: 都是优秀的js函数库 语法，API大部分都一样（zepto是按照jquery的思路来设计的） zepto相当于jquery的子集 同jquery一样都是以$为核心函数 不同点: jquery: 针对的更多的是PC端 体积较重 API较为完善 zepto 针对的是移动端 体积较轻 有自己独特的移动端事件 zepto core- 核心函数 - 作为函数调用 - 参数为函数 - 参数为选择器字符串 - 参数为DOM code - 参数为html标签字符串 - 作为对象使用 - 发送ajax请求 - $.ajax() 等 - 其他api方法 - $.each() 等 - 与jquery不同的API - DOM操作 - each方法 - offset() - width()height() - 事件委托 - 隐藏元素 - attr与prop zepto事件机制- touch Event - tap() - singleTap() - doubleTap() - longTap() - swipe() - Event - zepto有自己的一套事件机制，并且对不同的浏览器做了内部的封装处理。 - 舍弃了bind，delegate，die，同样jquery中舍弃了live，delegate等 - 统一使用on，off等标准事件 form- serialize() - 在Ajax post请求中将用作提交的表单元素的值编译成 URL-encoded 字符串。 - serializeArray() - 将用作提交的表单元素的值编译成拥有name和value对象组成的数组 - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。 - submit() - 为 &quot;submit&quot; 事件绑定一个处理函数，或者触发元素上的 &quot;submit&quot; 事件。 zepto和jquery方法的不同attr与prop的区别-jquery - prop多用在标签的固有属性，布尔值属性。比如：a标签的href，class，selected，checked等。 - attr多用在自定义属性上。 - jquery中用attr获取布尔值属性且布尔值属性在标签体内没有定义的时候会得到 undefined； 123456$(function () &#123; $(&apos;option&apos;).each(function () &#123; //console.log($(this).prop(&apos;selected&apos;)); console.log($(this).attr(&apos;selected&apos;)); &#125;) &#125;) - zepto - 在zepto中用attr也可以获取布尔值属性; - prop在读取属性的时候 优先级 高于attr，布尔值属性的读取还是建议用prop; - 坑！------zepto中 removeProp()的方法。在1.2+版本才支持。 DOM操作- jquery - jquery中插入DOM元素的时候添加配置对象(比如：id，class等。。。)不起作用。 - zepto - 插入DOM元素的时候添加配置对象（id，class等。。）的时候可以添加进去，并且会直接显示在标签属性内，可以操作，影响DOM元素。 each()- jquery - $.each(collection, function(index, item){ ... }) - 可以遍历数组,以index，item的形式。 - 可以遍历对象，以key-value的形式。 - 不可以遍历字符串。 - zepto - $.each(collection, function(index, item){ ... }) - 可以遍历数组,以index，item的形式。 - 可以遍历对象，以key-value的形式。 - 可以遍历字符串。 - 遍历json对象以字符串的形式遍历。 offset()- jquery - 获取匹配元素在当前视口的相对偏移。 - 返回的对象包含两个整型属性：top 和 left。此方法只对可见元素有效。 - zepto - 获得当前元素相对于视口的位置。 - 返回一个对象含有： top, left, width和height(获取到的width，height都是包含padding和border的值)。 获取宽高- jquery - width(),height()---content内容区的宽高，没有单位px。 - .css(&apos;width&apos;)----可以获取content内容区的宽高、padding、border的值，有单位px。 - innerHeight(),innerWidth()---outerHeight(),outerWidth()来获取。 - zepto - zepto中的width(),height()是根据盒模型来取值的，包含补白和border的值。且不带单位。 - zepto中没有innerHeight(),innerWidth()---outerHeight(),outerWidth()。 - .css获取的width，height是内容区的宽高，包含单位。 - 通过.css()获取padding，border的值。 事件委托- jquery - $(function () { $(&apos;#box&apos;).on(&apos;click&apos;, &apos;.a&apos;, function () { alert(&apos;我是a触发的事件委托&apos;); $(this).removeClass(&apos;a&apos;).addClass(&apos;b&apos;); }); //b的事件委托 $(&apos;#box&apos;).on(&apos;click&apos;, &apos;.b&apos;, function () { alert(&apos;我是b触发的事件委托&apos;); $(this).removeClass(&apos;b&apos;).addClass(&apos;a&apos;); }); $(&apos;#box&apos;).append(&apos;&lt;p class=&quot;a&quot;&gt;我是新添加的p标签&lt;/p&gt;&apos;) }); - 点击a的时候弹出&quot;我是a触发的事件委托&quot;,a的class变为 b - 点击b的时候弹出&quot;我是b触发的事件委托&quot;,b的class变为 a - zepto - 坑！！！！ - 在zepto中事件委托 委托在同一个父元素身上的时候 - 委托的事件先被依次放入数组队列里，然后由自身开始往后找直到找到最后，期间符合条件的元素委托的事件都会执行。 1、委托在同一个父元素 2、同一个事件 3、委托关联 操作的类要进行关联 4、顺序---从当前的位置往后看 $(function () { $(&apos;body&apos;).on(&apos;touchstart&apos;, &apos;.a&apos;, function () { alert(&apos;我是a触发的事件委托&apos;); $(this).removeClass(&apos;a&apos;).addClass(&apos;b&apos;); }); //b额事件委托 $(&apos;#box&apos;).on(&apos;touchstart&apos;, &apos;.b&apos;, function () { $(&apos;#box1&apos;).css(&apos;background&apos;, &apos;red&apos;) console.log(this) alert(&apos;我是b触发的事件委托&apos;); $(this).removeClass(&apos;b&apos;).addClass(&apos;a&apos;); }); $(&apos;#box&apos;).append(&apos;&lt;p class=&quot;a&quot;&gt;我是新添加的p标签&lt;/p&gt;&apos;) }); - 点击a触发&quot;我是a触发的事件委托&quot;a的class变成b - 点击b会先触发&quot;我是b触发的事件委托&quot;,然后再弹出&quot;我是a触发的事件委托&quot;,在a中console.log(this),则输出的是b。 tocuh Event- jquery - on() 绑定事件处理程序 - off() 方法移除用目标元素on绑定的事件处理程序。 - bind() 为每个匹配元素的特定事件绑定事件处理函数，可同时绑定多个事件，也可以自定义事件。 - one() 为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。只执行一次。 - trigger() 触发有bind定义的事件（通常是自定义事件） - unbind() bind的反向操作，删除匹配元素所绑定的bind事件。 - zepto - tap() 点击事件 利用在document上绑定touch事件来模拟tap事件的，并且tap事件会冒泡到document上 - singleTap() 点击事件 - doubleTap() 双击事件 - longTap() 当一个元素被按住超过750ms触发。 - swipe, swipeLeft, swipeRight, swipeUp,swipeDown — 当元素被划过（同一个方向大于30px）时触发。(可选择给定的方向) - 在一个方向滑动大于30px即为滑动。否则算点击。 event- zepto有自己的一套事件机制，并且对不同的浏览器做了兼容的内部封装处理。 - 像新版本的zepto中已经舍弃了bind，delegate，die，同样jquery中舍弃了live等。 - 现在统一使用on，off标准事件来绑定事件。 $(function () { //事件绑定 $(&apos;#box&apos;).on(&apos;touchstart&apos;,function () { alert(&apos;on事件&apos;); }); $(&apos;#box&apos;).off(); //事件委托 $(&apos;#box1&apos;).on(&apos;touchstart&apos;,&apos;p&apos;,function () { alert($(this).html()); }); }); form- serialize() - 在Ajax post请求中将用作提交的表单元素的值编译成 URL-encoded 字符串。---key(name)/value - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。 - serializeArray() - 将用作提交的表单元素的值编译成拥有name和value对象组成的数组。 - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。 - submit() - 为 &quot;submit&quot; 事件绑定一个处理函数，或者触发元素上的 &quot;submit&quot; 事件。 - 当参数function没有给出时，触发当前表单“submit”事件，并且执行默认的提交表单行为，除非阻止默认行为。]]></content>
      <categories>
        <category>zepto</category>
      </categories>
      <tags>
        <tag>zepto</tag>
      </tags>
  </entry>
</search>
