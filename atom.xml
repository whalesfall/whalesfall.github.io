<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WhaleFall</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-14T13:24:17.948Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>h5常用新增元素</title>
    <link href="http://yoursite.com/2017/08/12/h5%E5%B8%B8%E7%94%A8%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/08/12/h5常用新增元素/</id>
    <published>2017-08-12T12:50:35.000Z</published>
    <updated>2017-08-14T13:24:17.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html5简介"><a href="#HTML5简介" class="headerlink" title="HTML5简介"></a>HTML5简介</h3><p>HTML5 是 HTML 标准的下一个重要版本，用来替代 HTML 4.01，XHTML 1.0 以及 XHTML 1.1。HTML5 也是一种在万维网上构建和呈现内容的标准。</p>
<p>HTML5 是万维网联盟（W3C）和网页超文本技术工作小组（WHATWG）合作的产物。</p>
<p>HTML5 是近十年来 Web 开发标准最巨大的飞跃。HTML5 并非仅仅用来表示 Web 内容，它将 Web 带入一个成熟的应用平台，在 HTML5 平台上，视频、音频、图象、动画，以及同电脑的交互都被标准化。<br>HTML5 引入了许多新元素和属性帮助我们构建现代化的网站。</p>
<h4 id="html5引入的主要特性"><a href="#HTML5引入的主要特性" class="headerlink" title="HTML5引入的主要特性"></a>HTML5引入的主要特性</h4><ul>
<li>新的语义化元素： 比如 <code>&lt;header&gt;</code>，<code>&lt;footer&gt;</code> 和 <code>&lt;section&gt;</code>。</li>
<li>表单 2.0： 改进了 HTML Web 表单，为 <code>&lt;input&gt;</code> 标签引入了一些新的属性。</li>
<li>持久的本地存储： 为了不通过第三方插件实现。</li>
<li>WebSocket： 用于 Web 应用程序的下一代双向通信技术。</li>
<li>服务器推送事件： HTML5 引入了从 Web 服务器到 Web 浏览器的事件，也被称作服务器推送事件（SSE）。</li>
<li>Canvas： 支持用 JavaScript 以编程的方式进行二维绘图。</li>
<li>音频和视频： 在网页中嵌入音频或视频而无需借助第三方插件。</li>
<li>地理定位： 用户可以选择与我们的网页共享他们的地理位置。</li>
<li>拖放： 把同一网页上的条目从一个位置拖放到另一个位置。</li>
</ul>
<h4 id="html5浏览器支持"><a href="#HTML5浏览器支持" class="headerlink" title="HTML5浏览器支持"></a>HTML5浏览器支持</h4><p>最新版 Apple Safari，Mozilla FireFox 和 Opera 支持大部分 HTML5 特性，IE9 也支持一些 HTML5 的功能。</p>
<p>预装在 iPhones，iPads 和 Android 手机上的手机浏览器都对 HTML5 有良好的支持。</p>
<hr>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ul>
<li>给程序使用的数据，存储在自定义属性中</li>
<li>自定义属性只能存储字符串或数字</li>
<li>语法规则<ul>
<li>必须以 <code>data-</code>前缀开头</li>
<li>多个英文单词使用 <code>-</code> 连接<br>  <code>&lt;div data-demo-test=&quot;hello world&quot;&gt;&lt;/div&gt;</code></li>
</ul>
</li>
<li>Dom使用 <code>dataset</code> 操作自定义属性<ul>
<li>去掉前缀 <code>data-</code></li>
<li>连接符内容采用驼峰命名法<br>  <code>boxDom.dataset.demoTest</code></li>
</ul>
</li>
</ul>
<h3 id="html5新语义标签"><a href="#HTML5新语义标签" class="headerlink" title="HTML5新语义标签"></a>HTML5新语义标签</h3><ul>
<li>新增的语音元素等同于DIV. 可以独占一行.也可以设置宽高</li>
<li>没有语义的情况下，就需要是使用DIV了。</li>
<li><strong>注意：千万不要为了语义而语义</strong></li>
</ul>
<p><img src="http://i.imgur.com/avukaOA.jpg" alt=""></p>
<h4 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h4><ul>
<li>header 元素代表“网页”或“section”的页眉。</li>
<li>通常包含h1-h6元素或hgroup，作为整个页面或者一个内容块的标题。</li>
<li>也可以包裹一节的目录部分，一个搜索框，一个nav，或者任何相关logo。</li>
<li>整个页面没有限制header元素的个数，可以拥有多个，可以为每个内容块增加一个header元素</li>
<li>注意事项: <ol>
<li>可以是“网页”或任意“section”的头部部分；</li>
<li>没有个数限制。</li>
<li>如果hgroup或h1-h6自己就能工作的很好，那就不要用header。</li>
</ol>
</li>
</ul>
<h4 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h4><ul>
<li>footer元素代表“网页”或“section”的页脚</li>
<li>通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料。</li>
<li>如果footer元素包含了整个节，那么它们就代表附录，索引，提拔，许可协议，标签，类别等一些其他类似信息。</li>
<li>注意事项: <ol>
<li>可以是“网页”或任意“section”的底部部分；</li>
<li>没有个数限制，除了包裹的内容不一样，其他跟header类似。</li>
</ol>
</li>
</ul>
<h4 id="hgroup元素"><a href="#hgroup元素" class="headerlink" title="hgroup元素"></a>hgroup元素</h4><ul>
<li>hgroup元素代表“网页”或“section”的标题</li>
<li>当元素有多个层级时，该元素可以将h1到h6元素放在其内</li>
<li>譬如文章的主标题和副标题的组合</li>
<li>注意事项: <ol>
<li>如果只需要一个h1-h6标签就不用hgroup</li>
<li>如果有连续多个h1-h6标签就用hgroup</li>
<li>如果有连续多个标题和其他文章数据，h1-h6标签就用hgroup包住，和其他文章元数据一起放入header标签。</li>
</ol>
</li>
</ul>
<h4 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h4><ul>
<li>nav元素代表页面的导航链接区域。用于定义页面的主要导航部分。</li>
<li>用在整个页面主要导航部分上。可以把导航条标签ul放到nav里面</li>
</ul>
<h4 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h4><ul>
<li>article代表一个在文档，页面或者网站中自成一体的内容，其目的是为了让开发者独立开发或重用。</li>
<li>譬如论坛的帖子，博客上的文章，一篇用户的评论，一个互动的widget小工具。  </li>
<li>注意事项: <ol>
<li>一张页面可以用section划分为简介、文章条目和联系信息。不过在文章内页，最好用article。section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。</li>
<li>article、nav、aside可以理解为特殊的section，所以如果可以用article、nav、aside就不要用section，没实际意义的就用div</li>
<li>article元素可以嵌套article也可以嵌套section. 也可以section 元素嵌套 article 这是一种特殊情况</li>
</ol>
</li>
</ul>
<h4 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h4><ul>
<li>section元素代表文档中的“节”或“段”</li>
<li>“段”可以是指一篇文章里按照主题的分段；“节”可以是指一个页面里的分组。</li>
<li>section通常还带标题，虽然html5中section会自动给标题h1-h6降级，但是最好手动给他们降级</li>
<li>注意事项: <ol>
<li>一张页面可以用section划分为简介、文章条目和联系信息。不过在文章内页，最好用article。section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。</li>
<li>表示文档中的节或者段；</li>
</ol>
</li>
</ul>
<h4 id="aside元素-次要信息"><a href="#aside元素-次要信息" class="headerlink" title="aside元素 (次要信息)"></a>aside元素 (次要信息)</h4><ul>
<li>aside元素被包含在article元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名词解释等。（特殊的section）</li>
<li>在article元素之外使用作为页面或站点全局的附属信息部分。最典型的是侧边栏，其中的内容可以是日志串连，其他组的导航，甚至广告，这些内容相关的页面。</li>
<li>注意事项: <ol>
<li>aside在article内表示主要内容的附属信息</li>
<li>在article之外则可做侧边栏，没有article与之对应，最好不用。</li>
<li>如果是广告，其他日志链接或者其他分类导航也可以用</li>
</ol>
</li>
</ul>
<hr>
<h3 id="html5-表单"><a href="#HTML5-表单" class="headerlink" title="HTML5 表单"></a>HTML5 表单</h3><ul>
<li><code>&lt;form method=&quot;&quot;&gt;</code> 请求方式<ul>
<li>get      </li>
<li>post    </li>
</ul>
</li>
<li><code>&lt;label for=&quot;&quot;&gt;</code> input提示信息<ul>
<li>需要获取input的id属性值关联</li>
<li>点击文字,鼠标光标在输入框内闪烁</li>
</ul>
</li>
</ul>
<h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><ul>
<li>输入类可选属性<ul>
<li>email      电子邮箱输入框</li>
<li>tel           电话号码输入框</li>
<li>url          网页url地址栏输入框</li>
<li>search     搜索引擎输入框</li>
<li>number   输入数字<ul>
<li>max     最大到</li>
<li>min      最小到</li>
<li>step     以某梯度增加或减少</li>
</ul>
</li>
</ul>
</li>
<li>选择类可选属性<ul>
<li>range    特定范围内的数值选择器<ul>
<li>max     最大到</li>
<li>min      最小到</li>
<li>step     以某梯度增加或减少</li>
</ul>
</li>
<li>color    颜色选择</li>
<li>detetime-local    日期选择<ul>
<li>time</li>
<li>date</li>
<li>week</li>
<li>month</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="语义化表单新属性"><a href="#语义化表单新属性" class="headerlink" title="语义化表单新属性"></a>语义化表单新属性</h4><ul>
<li>placeholder  提示用户输入信息</li>
<li>autocomplete 是否保存用户输入值<ul>
<li>on 默认值. 自动填充</li>
<li>off  关闭自动填充提示</li>
</ul>
</li>
<li>autofocus 自动获取输入焦点</li>
<li>novalidate    不对输入进行验证. 填写在from中</li>
<li>maxlength:” length “控制表单输入项的文本长度</li>
<li>required    当表单提交时,输入项必须有内容</li>
<li>pattern    基于正则表达式验证格式. 重要的验证必须放在服务器端</li>
<li>formaction    在提交按钮中定义一个提交地址. 常用于保存草稿</li>
<li>formnovalidate    不做表单验证</li>
<li>DOM操作验证状态方法: setCustomValidity( )  <ul>
<li>不符合自定义验证时, 返回给用户一个自定义的字符串内容. </li>
<li>验证通过时, 可以填写空串. 一定不能写null</li>
</ul>
</li>
</ul>
<hr>
<h3 id="html5-history-新方法"><a href="#HTML5-history-新方法" class="headerlink" title="HTML5 history 新方法"></a>HTML5 history 新方法</h3><ul>
<li>history.pushState ( )     增加历史记录<ul>
<li>state object 数字，字符串，JSON对象</li>
<li>title（所有浏览器暂不支持）</li>
<li>URL [可选]显示在地址栏的网页地址</li>
</ul>
</li>
<li>history.replaceState( )     修改历史记录<ul>
<li>把当前的历史记录（history entry ）替换成新的历史记录</li>
<li>参数同pushState</li>
</ul>
</li>
<li>window.onpopstate 当窗口历史记录改变时运行的脚本<br>  -onpopstate触发时机：相同文档中，两个历史记录前进或后退切换时。</li>
</ul>
<hr>
<h3 id="html5-离线存储-api"><a href="#HTML5-离线存储-API" class="headerlink" title="HTML5 离线存储 API"></a>HTML5 离线存储 API</h3><h4 id="cookie存储的特点"><a href="#Cookie存储的特点" class="headerlink" title="Cookie存储的特点"></a>Cookie存储的特点</h4><pre><code>1.cookie由服务器创建，第一次响应后，记录在浏览器
2.每次请求，cookie都会发动到服务器
3.每次响应，cookie都会推送到浏览器
4.在浏览器读取cookie比较繁琐
5.cookie容量小，只有4kb
    - cookie 缺点: 需要在客户端和服务器端来回地传送，繁琐且消耗带宽；
</code></pre><h4 id="storage存储"><a href="#Storage存储" class="headerlink" title="Storage存储"></a>Storage存储</h4><ul>
<li>sessionStorage和localStorage的比较</li>
<li>数据生命周期：<ul>
<li>sessionStorage  数据创建到浏览器页签关闭</li>
<li>localStorage    数据创建到用户手动清除，或者使用clear(), removeItem(key)删除</li>
</ul>
</li>
<li>数据共享：<ul>
<li>sessionStorage 条件：同一个浏览器页签</li>
<li>localStorage   条件：相同域名（协议，域名，端口）的不同网址</li>
</ul>
</li>
<li>数据使用场景：<ul>
<li>频繁操作且安全性不高的数据</li>
</ul>
</li>
<li>可存储的数据格式：<ol>
<li>数字</li>
<li>字符串</li>
<li>JSON对象，需要使用 JSON.stringify(JSON对象)把其转换成字符串再存储。获取后再调用JSON.parse(JSON的字符串)转成JSON对象再使用。</li>
</ol>
</li>
<li>优点:<ul>
<li>sessionStorage / localStorage 优点: 保存在服务器端. 存储结构化方便提取</li>
</ul>
</li>
</ul>
<h4 id="sessionstorage-localstorage"><a href="#sessionStorage-localStorage" class="headerlink" title="sessionStorage / localStorage"></a>sessionStorage / localStorage</h4><ul>
<li>setItem(“key”, “value”);   <ul>
<li>增加一个数据</li>
</ul>
</li>
<li>getItem(‘key’) <ul>
<li>获取对应的value值</li>
</ul>
</li>
<li>removeItem(“key”);  <ul>
<li>删除一个数据</li>
</ul>
</li>
<li>clear(); <ul>
<li>清除所有</li>
</ul>
</li>
<li>length<ul>
<li>获取数据长度</li>
</ul>
</li>
<li>key(num)                   <ul>
<li>获取指定索引位的key值</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/jat4BB1.jpg" alt=""></p>
<hr>
<h3 id="html-音视频处理"><a href="#HTML-音视频处理" class="headerlink" title="HTML 音视频处理"></a>HTML 音视频处理</h3><h4 id="视频基础内容"><a href="#视频基础内容" class="headerlink" title="视频基础内容"></a>视频基础内容</h4><p><strong>目前实现网页视频播放的技术 - Flash</strong></p>
<ul>
<li>Flash并不是浏览器原生支持(第三方组件)</li>
<li>Flash的性能并不好</li>
<li>移动端不支持Flash技术</li>
</ul>
<p><strong>HTML 5 提供的视频处理技术 - <code>&lt;video&gt;</code></strong></p>
<ul>
<li>提供了相对应的基本处理方式</li>
<li>提供了高级编程自定义方式</li>
</ul>
<p><strong><code>&lt;video&gt;</code>元素所支持的视频格式</strong></p>
<ul>
<li>MP4格式：视频文件扩展名为”.mp4”</li>
<li>OGG格式：视频文件扩展名为”.ogv”</li>
<li>WEBM格式：视频文件扩展名为:”.webm”<ul>
<li>是由Google公司推出的(最初Chrome并不支持)</li>
<li>是目前唯一一个支持超高清的视频格式</li>
</ul>
</li>
</ul>
<h4 id="如何使用元素"><a href="#如何使用元素" class="headerlink" title="如何使用元素"></a>如何使用<video>元素</video></h4><p><strong>引入单个视频格式</strong></p>
<pre><code>&lt;video src=&quot;视频文件的路径&quot; autoplay&gt;
    浏览器不支持的提示内容
&lt;/video&gt;
</code></pre><ul>
<li>autoplay属性：自动播放视频</li>
<li>width属性：设置视频的宽度</li>
<li>height属性：设置视频的高度</li>
<li>style属性：设置CSS样式</li>
<li>class属性：设置CSS样式</li>
</ul>
<pre><code>&lt;video src=&quot;../DATA/oceans-clip.mp4&quot; autoplay width=&quot;640px&quot; height=&quot;400px&quot; style=&quot;background:black;&quot;&gt;
    非常抱歉,你的浏览器不支持该视频!
&lt;/video&gt;
</code></pre><p><strong>引入多个视频格式</strong></p>
<pre><code>&lt;video autoplay&gt;
    &lt;source src=&quot;视频文件的路径&quot; /&gt;
    &lt;source src=&quot;视频文件的路径&quot; /&gt;
    &lt;source src=&quot;视频文件的路径&quot; /&gt;
    浏览器不支持的提示内容
&lt;/video&gt;




&lt;!-- 解决了浏览器对视频格式的兼容问题 --&gt;
&lt;video autoplay&gt;
    &lt;!--
        &lt;source&gt;元素
        * 引入视频文件(一个&lt;video&gt;元素允许包含多个&lt;source&gt;)
    --&gt;
    &lt;source src=&quot;../DATA/oceans-clip.mp4&quot; /&gt;
    &lt;source src=&quot;../DATA/oceans-clip.ogv&quot; /&gt;
    &lt;source src=&quot;../DATA/oceans-clip.webm&quot; /&gt;
&lt;/video&gt;
</code></pre><h4 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a><video>元素的属性</video></h4><ul>
<li>autoplay属性：自动播放</li>
<li>controls属性：提供控制面板</li>
</ul>
<pre><code>&lt;video src=&quot;../DATA/oceans-clip.mp4&quot; controls&gt;&lt;/video&gt;
</code></pre><ul>
<li>loop属性：循环播放</li>
</ul>
<pre><code>&lt;video src=&quot;../DATA/oceans-clip.mp4&quot; autoplay loop&gt;&lt;/video&gt;
</code></pre><ul>
<li><p>poster属性：播放之前实现一张图片</p>
<pre><code>&lt;video src=&quot;../DATA/oceans-clip.mp4&quot; controls poster=&quot;../DATA/oceans-clip.png&quot;&gt;&lt;/video&gt;
</code></pre></li>
<li><p>preload属性：预加载视频</p>
<ul>
<li>none：不预加载</li>
<li>auto：默认值,尽快预加载</li>
<li>metadata：预加载除视频之外的内容(宽度、高度等)</li>
</ul>
</li>
</ul>
<h4 id="视频高级编程"><a href="#视频高级编程" class="headerlink" title="视频高级编程"></a>视频高级编程</h4><ul>
<li>事件<ul>
<li>play：视频播放时触发</li>
<li>pause：视频暂停时触发</li>
<li>ended：视频播放结束时触发</li>
<li>error：视频播放错误时触发</li>
</ul>
</li>
</ul>
<ul>
<li>方法<ul>
<li>play( )：用于播放视频</li>
<li>pause( )：用于暂停视频</li>
<li>load( )：用于加载视频</li>
<li>canPlayType( )：判断当前浏览器是否支持当前视频格式</li>
</ul>
</li>
</ul>
<ul>
<li>属性<ul>
<li>paused：如果视频为暂停或未播放时,返回true</li>
<li>ended：如果视频播放完毕时,返回true</li>
<li>duration：返回当前视频的时长</li>
<li>currentTime：获取或设置视频的当前位置</li>
</ul>
</li>
</ul>
<hr>
<h4 id="音频基础内容"><a href="#音频基础内容" class="headerlink" title="音频基础内容"></a>音频基础内容</h4><ul>
<li><p>目前音频处理技术</p>
<ul>
<li>Flash技术也可以音频处理</li>
<li>Media Player播放器允许嵌入在网页中</li>
</ul>
</li>
<li><p>HTML 5提供的音频处理 - <code>&lt;audio&gt;</code></p>
<ul>
<li>浏览器原生支持</li>
<li>性能很好</li>
<li>移动端支持</li>
</ul>
</li>
<li><p><code>&lt;audio&gt;</code>元素支持的音频格式</p>
<ul>
<li>mp3 </li>
<li>ogg</li>
<li>wav</li>
</ul>
</li>
</ul>
<h4 id="如何使用元素"><a href="#如何使用元素-1" class="headerlink" title="如何使用元素"></a>如何使用<audio>元素</audio></h4><ul>
<li>引入单个音频格式</li>
</ul>
<pre><code>&lt;audio src=&quot;音频文件的路径&quot; autoplay&gt;
    浏览器不支持的提示内容
&lt;/audio&gt;
</code></pre><ul>
<li>引入多个音频格式</li>
</ul>
<pre><code>&lt;audio autoplay&gt;
    &lt;source src=&quot;音频文件的路径&quot; /&gt;
    &lt;source src=&quot;音频文件的路径&quot; /&gt;
    &lt;source src=&quot;音频文件的路径&quot; /&gt;
    浏览器不支持的提示内容
&lt;/audio&gt;
</code></pre><h4 id="元素的特有属性"><a href="#元素的特有属性" class="headerlink" title="元素的特有属性"></a><audio>元素的特有属性</audio></h4><ul>
<li>autoplay属性：自动播放</li>
<li>controls属性：提供控制面板</li>
<li>loop属性：循环播放</li>
<li>preload属性：预加载视频<ul>
<li>none：不预加载</li>
<li>auto：默认值,尽快预加载</li>
<li>metadata：预加载除视频之外的内容(宽度、高度等)</li>
</ul>
</li>
</ul>
<h4 id="元素的高级编程"><a href="#元素的高级编程" class="headerlink" title="元素的高级编程"></a><audio>元素的高级编程</audio></h4><ul>
<li><p>事件</p>
<ul>
<li>play：视频播放时触发</li>
<li>pause：视频暂停时触发</li>
<li>ended：视频播放结束时触发</li>
<li>error：视频播放错误时触发</li>
</ul>
</li>
<li><p>方法</p>
<ul>
<li>play( )：用于播放视频</li>
<li>pause( )：用于暂停视频</li>
<li>load( )：用于加载视频</li>
<li>canPlayType( )：判断当前浏览器是否支持当前视频格式</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li>paused：如果视频为暂停或未播放时,返回true</li>
<li>ended：如果视频播放完毕时,返回true</li>
<li>duration：返回当前视频的时长</li>
<li>currentTime：获取或设置视频的当前位置</li>
</ul>
</li>
</ul>
<h3 id="canvas画布"><a href="#Canvas画布" class="headerlink" title="Canvas画布"></a>Canvas画布</h3><h4 id="canvas简介"><a href="#Canvas简介" class="headerlink" title="Canvas简介"></a>Canvas简介</h4><ul>
<li>Canvas技术允许在HTML页面直接绘制图形</li>
<li>不再需要引入外部图片(图形),HTML页面性能有所提高</li>
<li>可以实现一些比较复杂的图形绘制工作</li>
</ul>
<h4 id="canvas主要应用方向"><a href="#Canvas主要应用方向" class="headerlink" title="Canvas主要应用方向"></a>Canvas主要应用方向</h4><ul>
<li>Web应用方面主要实现图表类</li>
<li>网页游戏方面 - 主要实现2D效果</li>
</ul>
<h4 id="html5提供的技术"><a href="#HTML5提供的技术" class="headerlink" title="HTML5提供的技术"></a>HTML5提供的技术</h4><ul>
<li>Canvas - 主要以2D为主</li>
<li>WebGL - 主要以3D为主</li>
<li>SVG - 矢量图</li>
</ul>
<h3 id="如何使用canvas画布"><a href="#如何使用Canvas画布" class="headerlink" title="如何使用Canvas画布"></a>如何使用Canvas画布</h3><h4 id="使用canvas"><a href="#使用canvas" class="headerlink" title="使用canvas"></a>使用canvas</h4><ul>
<li>在HTML页面中定义<code>&lt;canvas&gt;</code>元素</li>
<li>设置<code>&lt;canvas&gt;</code>元素宽度和高度使用属性方式</li>
<li>使用CSS样式方式设置<code>&lt;canvas&gt;</code>元素的宽度和高度</li>
</ul>
<h4 id="在js代码中"><a href="#在JS代码中" class="headerlink" title="在JS代码中"></a>在JS代码中</h4><ul>
<li>获取<code>&lt;canvas&gt;</code>元素</li>
<li>通过<code>&lt;canvas&gt;</code>元素,创建画布对象<ul>
<li>getContext(‘2d’)函数</li>
<li>返回画布对象</li>
</ul>
</li>
<li>利用画布对象进行图形的绘制</li>
</ul>
<pre><code>&lt;!-- 
    1\. 在HTML页面中,定义&lt;canvas&gt;元素
     * 默认只定义&lt;canvas&gt;元素时
       * 效果非常类似于&lt;div&gt;元素,但不一样的地方:
         * &lt;div&gt;元素在默认情况下,不具有高度和宽度的
         * &lt;canvas&gt;元素在默认情况下,具有高度和宽度的
           * 宽度 - 300px
           * 高度 - 150px
     * 设置&lt;canvas&gt;元素的高度和宽度
       * (建议)使用属性width和height
       * 使用CSS中的属性width和height
         * 绘制的图形会被拉伸
  --&gt;
&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink;&quot;&gt;&lt;/canvas&gt;
&lt;!--
&lt;canvas id=&quot;canvas&quot; style=&quot;width:500px;height:500px;&quot;&gt;&lt;/canvas&gt;
--&gt;
&lt;script&gt;
    // 2\. 获取HTML页面中的&lt;canvas&gt;元素
    var canvas = document.getElementById(&quot;canvas&quot;);
    /*
       3\. 通过&lt;canvas&gt;元素,创建画布对象
         使用getContext(type)函数,创建画布对象
         * 该函数返回画布对象
         * type参数
           * 设置当前创建的画布是2d还是3d
           * 注意
             * 参数选项是2d(3d效果使用WebGL)
             * 必须写成&quot;2d&quot;
     */
    var context = canvas.getContext(&quot;2d&quot;);
    // 4\. 利用画布对象,进行绘制图形
    context.fillRect(10,10,100,100);
&lt;/script&gt;
</code></pre><hr>
<h3 id="canvas的特点"><a href="#Canvas的特点" class="headerlink" title="Canvas的特点"></a>Canvas的特点</h3><ul>
<li>绘制的图形与HTML页面之间是无关系的</li>
<li>通过Canvas绘制的图形不能使用DOM API</li>
<li>通过Canvas绘制的图形不能绑定事件</li>
<li>Canvas画布最终是以图片(png|jpg)形式出现</li>
<li>绘制图形默认的颜色为黑色</li>
</ul>
<hr>
<h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><p><strong>fillRect(x,y,width,height) - 绘制实心(填充)矩形</strong></p>
<ul>
<li>x和y：绘制矩形的左上角的坐标值</li>
<li>width：设置绘制矩形的宽度(单位为px)</li>
<li>height：设置绘制矩形的高度(单位为px)</li>
</ul>
<p><strong>strokeRect(x,y,width,height) - 绘制空心(描边)矩形</strong></p>
<ul>
<li>x和y：绘制矩形的左上角的坐标值</li>
<li>width：设置绘制矩形的宽度(单位为px)</li>
<li>height：设置绘制矩形的高度(单位为px)</li>
</ul>
<p><strong>clearRect(x,y,width,height) - 清除指定区域的矩形</strong></p>
<ul>
<li>x和y：绘制矩形的左上角的坐标值</li>
<li>width：设置绘制矩形的宽度(单位为px)</li>
<li>height：设置绘制矩形的高度(单位为px)</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    // 1\. 获取&lt;canvas&gt;元素
    var canvas = document.getElementById(&quot;canvas&quot;);
    // 2\. 创建画布对象
    var context = canvas.getContext(&apos;2d&apos;);
    // 3\. 绘制图形
    // a. 绘制实心矩形
    context.fillRect(10,10,100,100);
    // b. 绘制空心矩形
    context.strokeRect(120,10,100,100);
    // c. 清除指定区域的矩形
    context.fillRect(230,10,100,100);
    context.clearRect(240,20,80,80);
&lt;/script&gt;
</code></pre><hr>
<h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><ul>
<li>fillStyle：设置填充样式</li>
<li>strokeStyle：设置描边样式</li>
<li>globalAlpha：设置透明度(0-1)</li>
</ul>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>一定要先设置样式(颜色),再绘制图形</li>
<li>每次改变样式(颜色),重新设置</li>
</ul>
</blockquote>
<p><strong>设置颜色的方式</strong></p>
<ul>
<li>使用普通的单词</li>
<li>使用#000000形式</li>
<li>使用三原色rgba(0,0,0,1)形式</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&apos;2d&apos;);

    // a. 设置填充样式
    context.fillStyle = &quot;pink&quot;;
    // b. 绘制实心矩形
    context.fillRect(10,10,100,100);

    context.fillStyle = &quot;blue&quot;;
    context.fillRect(10,120,100,100);

    // 设置描边样式
    context.strokeStyle = &quot;red&quot;;
    context.strokeRect(120,10,100,100);

    context.strokeStyle = &quot;green&quot;;
    context.strokeRect(120,120,100,100);

    // 设置透明度
    context.globalAlpha = 0.5;
    context.fillRect(230,10,100,100);

    context.fillStyle = &quot;black&quot;;
    context.globalAlpha = 0.1;
    context.fillRect(230,120,100,100);
&lt;/script&gt;
</code></pre><hr>
<h4 id="设置渐变"><a href="#设置渐变" class="headerlink" title="设置渐变"></a>设置渐变</h4><p><strong>线性渐变</strong></p>
<p>createLinearGradient(x1,y1,x2,y2)</p>
<ul>
<li>基准线：是设置线性渐变的标准</li>
<li>参数<ul>
<li>x1和y1：基准线的起点坐标值</li>
<li>x2和y2：基准线的终点坐标值</li>
</ul>
</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&apos;2d&apos;);
    /*
       设置线性渐变
       createLinearGradient(x1,y1,x2,y2)方法
       * 该方法具有返回值,是渐变对象
     */
    var grd = context.createLinearGradient(0,0,100,100);
    /*
       设置线性渐变的颜色和位置
       addColorStop(position,color)
       * position - 设置颜色的位置
         * 值的范围为 0 - 1
       * color - 设置颜色
     */
    grd.addColorStop(0,&quot;red&quot;);
    grd.addColorStop(1,&quot;blue&quot;);
    grd.addColorStop(0.5,&quot;yellow&quot;);
    // 将设置的线性渐变,赋值给样式(fillStyle和strokeStyle)
    context.fillStyle = grd;
    // 绘制矩形
    context.fillRect(0,0,100,100);
&lt;/script&gt;
</code></pre><p><strong>射线(扇形)渐变</strong></p>
<p>createRadialGradient(x1,y1,r1,x2,y2,r2)</p>
<ul>
<li>基准圆(2个)：设置射线渐变的标准</li>
<li>参数<ul>
<li>x1和y1：第一个基准圆的圆心</li>
<li>r1：第一个基准圆的半径</li>
<li>x2和y2：第二个基准圆的圆心</li>
<li>r2：第二个基准圆的半径</li>
</ul>
</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    /*
       设置射线渐变
       createRadialGradient(x1,y1,r1,x2,y2,r2)
       * 该方法返回渐变对象
     */
    var grd = context.createRadialGradient(100,100,100,canvas.width,canvas.height,200);
    /*
       设置渐变颜色
     */
    grd.addColorStop(0,&quot;red&quot;);
    grd.addColorStop(1,&quot;blue&quot;);
    // 将渐变对象赋值给样式
    context.fillStyle = grd;
    // 绘制矩形
    context.fillRect(0,0,canvas.width,canvas.height);
&lt;/script&gt;
</code></pre><p><strong>设置渐变颜色</strong></p>
<p>addColorStop(position,color)</p>
<ul>
<li>position：设置渐变颜色的位置<ul>
<li>值的范围必须是 0-1</li>
</ul>
</li>
<li>color：设置渐变的颜色</li>
</ul>
<hr>
<h4 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h4><p><strong>设置文字的属性：font属性</strong></p>
<p><strong>设置文字的对齐方式</strong></p>
<ul>
<li>水平对齐：textAlign<ul>
<li>left：基准线在左边</li>
<li>center：基准线在中间</li>
<li>right：基准线在右边</li>
</ul>
</li>
<li>垂直对齐：textBaseline<ul>
<li>top：基准线在上边</li>
<li>middle：基准线在中间</li>
<li>bottom：基准线在下边</li>
<li>hanging：悬挂基线</li>
<li>alphabetic：字母基线</li>
</ul>
</li>
</ul>
<p><strong>绘制文字的方法</strong></p>
<ul>
<li>fillText(text,x,y)：绘制实心文字<ul>
<li>text：绘制的文字内容</li>
<li>x和y：绘制文字的坐标值</li>
</ul>
</li>
<li>strokeText(text,x,y)：绘制空心文字<ul>
<li>text：绘制的文字内容</li>
<li>x和y：绘制文字的坐标值</li>
</ul>
</li>
</ul>
<hr>
<h4 id="设置阴影"><a href="#设置阴影" class="headerlink" title="设置阴影"></a>设置阴影</h4><ul>
<li>shadowColor：设置阴影颜色</li>
<li>shadowOffsetX：设置水平方向阴影</li>
<li>shadowOffsetY：设置垂直方向阴影</li>
<li>shadowBlur：设置阴影程度</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&apos;2d&apos;);

    // 设置文字样式
    context.font = &quot;bold 48px 宋体&quot;;
    // 基准线
    context.beginPath();
    context.moveTo(100,0);
    context.lineTo(100,400);
    context.stroke();
    // 设置水平对齐
    context.textAlign = &quot;right&quot;;
    // 绘制文字
    context.fillText(&quot;达内&quot;,100,50);

    // 设置水平对齐
    context.textAlign = &quot;center&quot;;
    // 绘制文字
    context.fillText(&quot;达内&quot;,100,100);

    // 设置水平对齐
    context.textAlign = &quot;left&quot;;
    // 绘制文字
    context.fillText(&quot;达内&quot;,100,150);

    // 基准线
    context.beginPath();
    context.moveTo(0,300);
    context.lineTo(500,300);
    context.stroke();
    // 设置垂直对齐
    context.textBaseline = &quot;top&quot;;
    context.strokeText(&quot;达内&quot;,0,300);

    context.textBaseline = &quot;middle&quot;;
    context.strokeText(&quot;达内&quot;,100,300);

    context.textBaseline = &quot;bottom&quot;;
    context.strokeText(&quot;达内&quot;,200,300);

    context.textBaseline = &quot;hanging&quot;;
    context.strokeText(&quot;达内&quot;,300,300);

    context.textBaseline = &quot;alphabetic&quot;;
    context.strokeText(&quot;达内&quot;,400,300);
&lt;/script&gt;
</code></pre><hr>
<h3 id="canvas绘图"><a href="#Canvas绘图" class="headerlink" title="Canvas绘图"></a>Canvas绘图</h3><h4 id="创建路径"><a href="#创建路径" class="headerlink" title="创建路径"></a>创建路径</h4><p>图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。</p>
<ol>
<li>首先，需要创建路径起始点。</li>
<li>然后，使用画图命令去画出路径。</li>
<li>之后，把路径封闭。</li>
<li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形。</li>
</ol>
<h4 id="绘制矩形"><a href="#绘制矩形-1" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用rect( x, y, width, height )方法，设置矩形的坐标值及宽度和高度。<ul>
<li>x和y：表示矩形的左上角坐标值。</li>
<li>width和height：表示矩形的宽度和高度。</li>
</ul>
</li>
<li>通过fill( )或stroke( )方法进行绘制。<ul>
<li>fill( )方法：通过填充路径的内容区域绘制实心图形。</li>
<li>stroke( )方法：通过线条绘制空心图形。</li>
</ul>
</li>
</ol>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 绘制实心矩形
    context.beginPath();// 开始创建路径
    context.rect(10,10,100,100);// 设置矩形
    //context.closePath();
    context.fill();// 调用绘制方法
    // 绘制空心矩形
    context.beginPath();// 开始创建路径
    context.rect(10,120,100,100);// 设置矩形
    context.stroke();// 调用绘制方法
&lt;/script&gt;
</code></pre><hr>
<h4 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用arc( x, y, radius, startAngle, endAngle, anticlockwise )方法，设置矩形的坐标值及宽度和高度。<ul>
<li>x和y：表示圆形的圆心坐标值。</li>
<li>radius：表示圆形的半径。</li>
<li>startAngle：表示绘制圆形的开始点，值为 0。</li>
<li>endAngle：表示绘制圆形的结束点，值为 Math.PI*2。</li>
<li>anticlockwise：表示是以顺时针还是以逆时针方式绘制圆形，Boolean值。<ul>
<li>false：默认值，表示顺时针。</li>
<li>true：表示逆时针。</li>
</ul>
</li>
</ul>
</li>
<li>通过fill( )或stroke( )方法进行绘制。<ul>
<li>fill( )方法：通过填充路径的内容区域绘制实心图形。</li>
<li>stroke( )方法：通过线条绘制空心图形。</li>
</ul>
</li>
</ol>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 绘制实心圆形
    context.beginPath();// 开始创建路径
    context.arc(170,60,50,0,Math.PI*2);// 设置圆形
    context.fill();// 调用绘制方法
    // 绘制空心圆形
    context.beginPath();
    context.arc(170,170,50,0,Math.PI*2);
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h4 id="绘制弧形"><a href="#绘制弧形" class="headerlink" title="绘制弧形"></a>绘制弧形</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用arc( x, y, radius, startAngle, endAngle, anticlockwise )方法，设置圆形。<ul>
<li>x和y：表示圆形的圆心坐标值。</li>
<li>radius：表示圆形的半径。</li>
<li>startAngle：表示绘制圆形的开始点。<ul>
<li>取值范围：0 至 Math.PI*2。</li>
</ul>
</li>
<li>endAngle：表示绘制圆形的结束点。<ul>
<li>取值范围：0 至 Math.PI*2。</li>
</ul>
</li>
<li>anticlockwise：表示是以顺时针还是以逆时针方式绘制圆形，Boolean值。<ul>
<li>false：默认值，表示顺时针。</li>
<li>true：表示逆时针。</li>
</ul>
</li>
</ul>
</li>
<li>通过fill( )或stroke( )方法进行绘制。<ul>
<li>fill( )方法：通过填充路径的内容区域绘制实心图形。</li>
<li>stroke( )方法：通过线条绘制空心图形。</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>注意：</strong><br>如果绘制的是空心弧形的话，在arc( )方法调用后：</p>
<ul>
<li>如果使用closePath( )方法的话，绘制的图形会自动将终点和起点连接成线。</li>
<li>如果不用closePath( )方法的话，绘制的图形会呈现开口状。</li>
</ul>
</blockquote>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 绘制空心弧形
    context.beginPath();
    context.arc(390,60,50,Math.PI/2,Math.PI*3/2);
    context.stroke();

    context.beginPath();
    context.arc(390,170,50,Math.PI/2,Math.PI*3/2,true);
    context.stroke();

    context.beginPath();
    context.arc(390,280,50,Math.PI/2,Math.PI*3/2);
    context.closePath();
    context.stroke();

    context.beginPath();
    context.arc(390,390,50,Math.PI/2,Math.PI*3/2,true);
    context.closePath();
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h4 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用moveTo( x, y )方法，设置直线的起点坐标值。<ul>
<li>x和y：表示直线的起点坐标值。</li>
</ul>
</li>
<li>使用lineTo( x, y )方法，设置直线的终点坐标值。<ul>
<li>x和y：表示直线的终点坐标值。</li>
</ul>
</li>
<li>通过stroke( )方法进行绘制。</li>
</ol>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 绘制直线
    context.beginPath();
    context.moveTo(10,10);
    context.lineTo(200,10);
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h4 id="绘制折线"><a href="#绘制折线" class="headerlink" title="绘制折线"></a>绘制折线</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用moveTo( x, y )方法，设置直线的起点坐标值。<ul>
<li>x和y：表示直线的起点坐标值。</li>
</ul>
</li>
<li>使用lineTo( x, y )方法，设置直线的终点坐标值。<ul>
<li>x和y：表示直线的终点坐标值。</li>
</ul>
</li>
<li>通过stroke( )方法进行绘制。</li>
</ol>
<blockquote>
<p><strong>注意：</strong><br>在绘制折线的时候，lineTo( )方法既可以绘制折点，也可以绘制终点。</p>
</blockquote>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 绘制折线一
    context.beginPath();
    context.moveTo(10,100);
    context.lineTo(200,100);
    context.stroke();

    context.beginPath();
    context.moveTo(200,100);
    context.lineTo(200,300);
    context.stroke();
    // 绘制折线二
    context.beginPath();
    context.moveTo(400,100);
    context.lineTo(500,100);
    context.lineTo(500,400);
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h4 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用moveTo( x, y )方法，设置直线的起点坐标值。<ul>
<li>x和y：表示直线的起点坐标值。</li>
</ul>
</li>
<li>使用lineTo( x, y )方法，设置直线的终点坐标值。<ul>
<li>x和y：表示直线的终点坐标值。</li>
</ul>
</li>
<li>调用closePath( )方法，闭合当前绘制的路径。</li>
<li>通过fill( )或stroke( )方法进行绘制。</li>
</ol>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 利用折线的绘制,绘制空心矩形
    context.beginPath();
    context.moveTo(50,50);
    context.lineTo(150,50);
    context.lineTo(150,150);
    context.lineTo(50,150);
    context.lineTo(100,100);
    context.lineTo(50,50);
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h3 id="设置线型"><a href="#设置线型" class="headerlink" title="设置线型"></a>设置线型</h3><p>所有画布操作都使用相同的线型，即默认线型。实际上线条的宽度、端点都可以根据实际绘图需要进行调整。</p>
<h4 id="设置线宽"><a href="#设置线宽" class="headerlink" title="设置线宽"></a>设置线宽</h4><p>lineWidth：指定线条粗细，默认值是1.0。</p>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
  var canvas = document.getElementById(&apos;myCanvas&apos;);
  var context = canvas.getContext(&apos;2d&apos;);

  context.beginPath();
  context.moveTo(100, 150);
  context.lineTo(450, 50);
  context.lineWidth = 15;
  context.stroke();
&lt;/script&gt;
</code></pre><h4 id="设置端点形状"><a href="#设置端点形状" class="headerlink" title="设置端点形状"></a>设置端点形状</h4><p>lineCap：指定线条端点形状。</p>
<ul>
<li>butt：默认，向线条的每个末端添加平直的边缘。</li>
<li>round：向线条的每个末端添加圆形线帽。</li>
<li>square：向线条的每个末端添加正方向线帽。</li>
</ul>
<blockquote>
<p><strong>注意：</strong>round和square会使线条略变微长。</p>
</blockquote>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&apos;myCanvas&apos;);
    var context = canvas.getContext(&apos;2d&apos;);

    // butt line cap (top line)
    context.beginPath();
    context.moveTo(200, canvas.height / 2 - 50);
    context.lineTo(canvas.width - 200, canvas.height / 2 - 50);
    context.lineWidth = 20;
    context.strokeStyle = &apos;#0000ff&apos;;
    context.lineCap = &apos;butt&apos;;
    context.stroke();

    // round line cap (middle line)
    context.beginPath();
    context.moveTo(200, canvas.height / 2);
    context.lineTo(canvas.width - 200, canvas.height / 2);
    context.lineWidth = 20;
    context.strokeStyle = &apos;#0000ff&apos;;
    context.lineCap = &apos;round&apos;;
    context.stroke();

    // square line cap (bottom line)
    context.beginPath();
    context.moveTo(200, canvas.height / 2 + 50);
    context.lineTo(canvas.width - 200, canvas.height / 2 + 50);
    context.lineWidth = 20;
    context.strokeStyle = &apos;#0000ff&apos;;
    context.lineCap = &apos;square&apos;;
    context.stroke();
&lt;/script&gt;
</code></pre><h4 id="设置交点形状"><a href="#设置交点形状" class="headerlink" title="设置交点形状"></a>设置交点形状</h4><ul>
<li>lineJoin：指定两条线之间的连接点形状。<ul>
<li>round：创建圆角。</li>
<li>bevel：创建斜角。</li>
<li>miter：默认，创建尖角。</li>
</ul>
</li>
<li>miterLimit：与lineJoin一起使用，当lineJoin设置为miter时，可用于确定线条交接点的延伸范围。</li>
</ul>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&apos;myCanvas&apos;);
    var context = canvas.getContext(&apos;2d&apos;);

    // set line width for all lines
    context.lineWidth = 25;

    // miter line join (left)
    context.beginPath();
    context.moveTo(99, 150);
    context.lineTo(149, 50);
    context.lineTo(199, 150);
    context.lineJoin = &apos;miter&apos;;
    context.stroke();

    // round line join (middle)
    context.beginPath();
    context.moveTo(239, 150);
    context.lineTo(289, 50);
    context.lineTo(339, 150);
    context.lineJoin = &apos;round&apos;;
    context.stroke();

    // bevel line join (right)
    context.beginPath();
    context.moveTo(379, 150);
    context.lineTo(429, 50);
    context.lineTo(479, 150);
    context.lineJoin = &apos;bevel&apos;;
    context.stroke();
&lt;/script&gt;
</code></pre><hr>
<h3 id="处理图像"><a href="#处理图像" class="headerlink" title="处理图像"></a>处理图像</h3><p>在HTML5中，不仅可以使用Canvas API来绘制图形，还可以读取磁盘或网络中的图像文件，然后使用Canvas API将该图像绘制在画布中。</p>
<h4 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h4><ol>
<li>加载图像。<ul>
<li>使用相同页面中的图片。</li>
<li>使用相同页面中的其他Canvas元素。</li>
<li>可以脚本通过Image( )构造函数创建图像。</li>
</ul>
</li>
<li>绘制图像。<ul>
<li>drawImage( img, x, y )方法<ul>
<li>img：需要绘制的图像。</li>
<li>x和y：绘制图像的坐标值。</li>
</ul>
</li>
<li>drawImage( img, x, y, width, height )方法<ul>
<li>img：需要绘制的图像。</li>
<li>x和y：绘制图像的坐标值。</li>
<li>width和height：设置绘制图像的宽度和高度。</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&apos;myCanvas&apos;);
    var context = canvas.getContext(&apos;2d&apos;);
    var imageObj = new Image();
    imageObj.src = &apos;darth-vader.jpg&apos;;

    imageObj.onload = function() {
        context.drawImage(imageObj, 69, 50);
    };
&lt;/script&gt;
</code></pre><blockquote>
<p><strong>注意：</strong>若调用 drawImage 时，图片没装载完，那什么都不会发生（在一些旧的浏览器中可能会抛出异常）。因此你应该用load时间来保证不会在加载完毕之前使用这个图片：</p>
</blockquote>
<pre><code>var img = new Image();   // 创建img元素
img.src = &apos;myImage.png&apos;; // 设置图片源地址
img.onload = function(){
    // 执行drawImage语句
}
</code></pre><hr>
<h4 id="平铺图像"><a href="#平铺图像" class="headerlink" title="平铺图像"></a>平铺图像</h4><p>所谓图像平铺就是用按一定比例缩小后的图像将画布填满。</p>
<ol>
<li>加载图像。<ul>
<li>使用相同页面中的图片。</li>
<li>使用相同页面中的其他Canvas元素。</li>
<li>可以脚本通过Image( )构造函数创建图像。</li>
</ul>
</li>
<li>设置平铺方式。<ul>
<li>createPattern( img, type )方法<ul>
<li>img：需要平铺的图像。</li>
<li>type：平铺方式。<ul>
<li>no-repeat：不平铺</li>
<li>repeat-x：水平方向平铺</li>
<li>repeat-y：垂直方向平铺</li>
<li>repeat：全方向平铺</li>
</ul>
</li>
<li>该方法返回平铺对象。</li>
</ul>
</li>
</ul>
</li>
<li>将平铺对象赋值给filleStyle或strokeStyle属性。</li>
<li>将平铺的图像进行绘制。</li>
</ol>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&apos;myCanvas&apos;);
    var context = canvas.getContext(&apos;2d&apos;);

    var imageObj = new Image();
    imageObj.src = &apos;wood-pattern.png&apos;;
    imageObj.onload = function() {
        var pattern = context.createPattern(imageObj, &apos;repeat&apos;);

        context.rect(0, 0, canvas.width, canvas.height);
        context.fillStyle = pattern;
        context.fill();
    };
&lt;/script&gt;
</code></pre><blockquote>
<p><strong>注意：</strong>若调用 createPattern 时，图片没装载完，那什么都不会发生（在一些旧的浏览器中可能会抛出异常）。因此你应该用load时间来保证不会在加载完毕之前使用这个图片：</p>
</blockquote>
<pre><code>var img = new Image();   // 创建img元素
img.src = &apos;myImage.png&apos;; // 设置图片源地址
img.onload = function(){
    // 执行createPattern语句
}
</code></pre><hr>
<h4 id="切割图像"><a href="#切割图像" class="headerlink" title="切割图像"></a>切割图像</h4><ol>
<li>调用beginPath( )方法，创建新建一条路径。</li>
<li>使用rect( )或arc( )方法</li>
<li>通过clip( )方法进行切割。</li>
</ol>
<pre><code>var canvas = document.getElementById(&apos;canvas&apos;);
var context = elem.getContext(&apos;2d&apos;);
var image=new Image();
image.src=&quot;img/flower.jpg&quot;;
image.onload=function(){
    context.drawImage(image,0,0,280,190);
}
context.beginPath();
context.arc(140,95,60,0,Math.PI*2,true);
context.closePath();
context.clip();
</code></pre><hr>
<h3 id="画布方法"><a href="#画布方法" class="headerlink" title="画布方法"></a>画布方法</h3><h4 id="状态方法"><a href="#状态方法" class="headerlink" title="状态方法"></a>状态方法</h4><ul>
<li>save（），保存当前画布属性、状态。</li>
<li>restore（），恢复画布属性、状态。</li>
</ul>
<pre><code>var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;);

ctx.fillRect(0,0,150,150);   // Draw a rectangle with default settings
ctx.save();                  // Save the default state

ctx.fillStyle = &apos;#09F&apos;       // Make changes to the settings
ctx.fillRect(15,15,120,120); // Draw a rectangle with new settings

ctx.save();                  // Save the current state
ctx.fillStyle = &apos;#FFF&apos;       // Make changes to the settings
ctx.globalAlpha = 0.5;    
ctx.fillRect(30,30,90,90);   // Draw a rectangle with new settings

ctx.restore();               // Restore previous state
ctx.fillRect(45,45,60,60);   // Draw a rectangle with restored settings

ctx.restore();               // Restore original state
ctx.fillRect(60,60,30,30);   // Draw a rectangle with restored settings
</code></pre><h4 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h4><ul>
<li>translate(x, y)：用来移动 canvas 和它的原点到一个不同的位置。<ul>
<li>x 是左右偏移量。</li>
<li>y 是上下偏移量。</li>
</ul>
</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    context.fillRect(50,50,100,100);
    // 平移方法
    context.translate(250,250);
    context.fillRect(50,50,100,100);
&lt;/script&gt;
</code></pre><ul>
<li>scale(x, y)：用它来增减图形在 canvas 中的像素数目，对形状，位图进行缩小或者放大。<ul>
<li>x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。</li>
<li>值分类：<ul>
<li>值比 1.0 小表示缩小。</li>
<li>比 1.0 大则表示放大。</li>
<li>值为 1.0 时什么效果都没有。</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    context.fillRect(400,250,100,100);
    // 旋转方法
    context.rotate(Math.PI/180*15);
    context.fillRect(400,250,100,100);

    context.rotate(Math.PI/180*15);
    context.fillRect(400,250,100,100);
&lt;/script&gt;
</code></pre><ul>
<li>rotate(angle)：用于以原点为中心旋转 canvas。<ul>
<li>旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。</li>
</ul>
</li>
</ul>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500px&quot; height=&quot;500px&quot; style=&quot;background:pink&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    // 缩放方法
    context.scale(0.5,0.5);
    context.fillRect(100,100,300,300);
&lt;/script&gt;
</code></pre><hr>
<h3 id="chartjs库"><a href="#Chart-js库" class="headerlink" title="Chart.js库"></a>Chart.js库</h3><p>Chart.js是一个简单、面向对象、为设计者和开发者准备的图表绘制工具库。</p>
<p>官方网址：<a href="http://www.chartjs.org/" target="_blank" rel="external">http://www.chartjs.org/</a></p>
<p><strong>Chart.js的特点</strong></p>
<ul>
<li>基于HTML 5：Chart.js基于HTML5 canvas技术，支持所有现代浏览器，并且针对IE7/8提供了降级替代方案。</li>
<li>简单、灵活：Chart.js不依赖任何外部工具库，轻量级（压缩之后仅有4.5k），并且提供了加载外部参数的方法。</li>
</ul>
<h4 id="如何使用chartjs框架"><a href="#如何使用Chart-js框架" class="headerlink" title="如何使用Chart.js框架"></a>如何使用Chart.js框架</h4><ul>
<li><p>在HTML页面中引入Chart.js文件。</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>src="Chart.js">````</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 创建 ````&lt;canvas&gt;````元素：用于显示Chart图表的容器。</div><div class="line">	- ````&lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取Canvas对象。</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 创建Chart图表对象。</div><div class="line">  -  ````new Chart(ctx);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过Chart图表对象进行绘制。</p>
<ul>
<li><code>chart.PolarArea(data);</code></li>
</ul>
</li>
</ul>
<h4 id="chartjs全局配置"><a href="#Chart-js全局配置" class="headerlink" title="Chart.js全局配置"></a>Chart.js全局配置</h4><p>Chart.js 全局配置是在chart.js 第一个正式版本中引入。Chart.js 全局配置用于改变所有图表的类型，避免了需要在每一个图表中单独进行设置。当然，Chart.js 全局配置也可以专门为某一个特定的图表进行配置。</p>
<p><strong>语法</strong></p>
<p><code>Chart.defaults.global.参数名 = 参数值;</code></p>
<p><strong>举例</strong></p>
<p><code>Chart.defaults.global.responsive = true;</code></p>
<h4 id="曲线图"><a href="#曲线图" class="headerlink" title="曲线图"></a>曲线图</h4><p>曲线图就是将多个数据点绘制在一条线上，通常被用于展示趋势的数据或两组数据之间的对比。</p>
<p>new Chart(ctx).Line(data, options)</p>
<ul>
<li>data：用于设置曲线上的数据、样式及名称。</li>
<li>options：选项，用于配置曲线图。</li>
</ul>
<h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><p>柱状图就是使用柱状方式显示数据的一种方式，通常被用于展示趋势的数据或多组数据之间的比较。</p>
<p>new Chart(ctx).Bar(data, options)</p>
<ul>
<li>data：用于设置柱状图上的数据、样式及名称。</li>
<li>options：选项，用于配置柱状图。</li>
</ul>
<h4 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h4><p>饼状图可能是所有图表中最为常用的一种，就是将一个圆划分成若干个部分，每个弧形展示每个数据的比例值。通常被用于展示多组数据之间的比例。</p>
<p>new Chart(ctx).Pie(data,options)</p>
<ul>
<li>data：用于设置饼图的数据、样式及名称。</li>
<li>options：选项，用于配置饼图。</li>
</ul>
<h4 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h4><p>雷达图就是一种展示多个数据点以及它们之间变化的方式，通常被用于比较点的两个或多个不同的数据集。</p>
<p>new Chart(ctx).Radar(data, options)</p>
<ul>
<li>data：用于设置雷达图的数据、样式及名称。</li>
<li>options：选项，用于配置雷达图。</li>
</ul>
<h4 id="环形图"><a href="#环形图" class="headerlink" title="环形图"></a>环形图</h4><p>环形图类似于饼状图，但环形图是一个空心的环形形状，通常被用于展示多组数据之间关系的比例。</p>
<p>new Chart(ctx).Doughnut(data,options)</p>
<ul>
<li>data：用于设置环形图的数据、样式及名称。</li>
<li>options：选项，用于配置环形图。</li>
</ul>
<h4 id="极地区域图"><a href="#极地区域图" class="headerlink" title="极地区域图"></a>极地区域图</h4><p>极地区域图类似于饼状图，但每一个扇形的角度和半径取决于不同的值，通常被用于需要展示类似于饼状图的比较数据的基础上，还需要展示范围值的比较。</p>
<p>new Chart(ctx).PolarArea(data, options)</p>
<ul>
<li>data：用于设置极地区域图的数据、样式及名称。</li>
<li>options：选项，</li>
<li>用于配置极地区域图。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;html5简介&quot;&gt;&lt;a href=&quot;#HTML5简介&quot; class=&quot;headerlink&quot; title=&quot;HTML5简介&quot;&gt;&lt;/a&gt;HTML5简介&lt;/h3&gt;&lt;p&gt;HTML5 是 HTML 标准的下一个重要版本，用来替代 HTML 4.01，XHTML 1.0 以
    
    </summary>
    
      <category term="H5" scheme="http://yoursite.com/categories/H5/"/>
    
    
      <category term="H5" scheme="http://yoursite.com/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(二)</title>
    <link href="http://yoursite.com/2017/08/08/jQuery-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/08/08/jQuery-二/</id>
    <published>2017-08-08T08:02:30.000Z</published>
    <updated>2017-08-10T09:05:07.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery中的事件"><a href="#jQuery中的事件" class="headerlink" title="jQuery中的事件"></a>jQuery中的事件</h1><h2 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h2><p>原生DOM中的事件具有页面加载的内容onload事件，在jQuery中同样提供了对应的内容ready()函数。</p>
<p>ready与onload之间的区别：</p>
<ul>
<li>onload:<ul>
<li>没有简写方式</li>
<li>当HTML页面所有内容加载完毕后才执行onload</li>
<li>一个HTML页面只能编写一个onload</li>
</ul>
</li>
<li>ready:<ul>
<li>具有简写方式</li>
<li>当DOM节点加载完毕后就执行ready</li>
<li>一个HTML页面允许同时编写多个ready</li>
</ul>
</li>
</ul>
<p>ready()的编写方式：</p>
<ul>
<li>$(document).ready(function(){});</li>
<li>$().ready(function(){});</li>
<li>$(function(){});</li>
</ul>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>jQuery中提供了事件绑定与解绑机制，类似于原生DOM中的addEventListener()方法。</p>
<h3 id="单事件绑定"><a href="#单事件绑定" class="headerlink" title="单事件绑定"></a>单事件绑定</h3><p>单事件绑定就是指为指定元素绑定一个指定的事件，例如click、change等。</p>
<h3 id="多事件绑定"><a href="#多事件绑定" class="headerlink" title="多事件绑定"></a>多事件绑定</h3><p>多事件绑定就是为指定元素同时绑定多个指定的事件，例如同时绑定mouseover和mouseout事件等。</p>
<h2 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h2><p>模拟操作就是指通过程序模拟用户在页面中的操作，比如用户点击某个按钮的事件完成一个效果，jQuery中可以通过该方法模拟用户点击按钮事件。也就是说，不需要用户的操作行为，而是我们通过程序来模拟用户操作。</p>
<pre><code>$(&apos;#btn&apos;).bind(&quot;click&quot;, function(){
    $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数1&lt;/p&gt;&quot;);
}).bind(&quot;click&quot;, function(){
    $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数2&lt;/p&gt;&quot;);
}).bind(&quot;click&quot;, function(){
    $(&apos;#test&apos;).append(&quot;&lt;p&gt;我的绑定函数3&lt;/p&gt;&quot;);
});
$(&apos;#btn&apos;).trigger(&quot;click&quot;);
</code></pre><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><h3 id="什么是事件冒泡"><a href="#什么是事件冒泡" class="headerlink" title="什么是事件冒泡"></a>什么是事件冒泡</h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p>
<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul>
<li>DOM标准：event.stopPropagation()</li>
<li>IE: event.cancelBubble=true</li>
</ul>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h3><p>事件是一种JavaScript结构，它会在元素获得处理事件的机会时被传递给被调用的事件处理程序。这个对象中包含与事件相关的信息，也提供了可以影响事件在DOM中传递进程的一些方法。</p>
<h3 id="事件对象的常用属性"><a href="#事件对象的常用属性" class="headerlink" title="事件对象的常用属性"></a>事件对象的常用属性</h3><ul>
<li>srcElement/target : 事件源对象</li>
<li>eventPhase : 事件所处的传播阶段</li>
<li>clientX/offsetX/pageX/screenX/x：事件发生的X坐标</li>
<li>clientY/offsetY/pageY/screenY/y：事件发生的Y坐标</li>
<li>which/keyCode/charCode : 键盘事件中按下的按键</li>
<li>button：鼠标哪个按键被按下了</li>
<li>cancelBubble ：是否取消事件冒泡</li>
<li>returnValue : 是否阻止事件默认行为</li>
</ul>
<h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><p>所谓默认行为，就是指页面中默认具有的一些行为，例如表单提交、连接跳转等效果。</p>
<ul>
<li><code>event.preventDefault();</code></li>
<li><code>return false;</code></li>
</ul>
<hr>
<h1 id="jquery类数组操作"><a href="#jQuery类数组操作" class="headerlink" title="jQuery类数组操作"></a>jQuery类数组操作</h1><p>类数组对象就是结构上类似于数组的对象，该对象具备数组的一些特性属性或方法，同时具有自己独特的一些属性或方法。</p>
<h2 id="数组与类数组对象的区别"><a href="#数组与类数组对象的区别" class="headerlink" title="数组与类数组对象的区别"></a>数组与类数组对象的区别</h2><ul>
<li>数组的类型是Array</li>
<li>类数组对象的类型是Object</li>
</ul>
<h2 id="类数组的操作"><a href="#类数组的操作" class="headerlink" title="类数组的操作"></a>类数组的操作</h2><ul>
<li>length属性：获取指定元素的个数。</li>
<li>eq(index)：将下标等于index的DOM对象取出来。</li>
<li>get(index)：返回一个DOM对象组成的数组。</li>
<li>index（obj）：返回DOM或jQuery对象在类数组中的下标。</li>
<li><p>遍历方法：</p>
<ul>
<li><p>$(selector).each(callback)</p>
<ul>
<li><p>callback：回调函数，function(index,domEle){}</p>
<ul>
<li>index：遍历过程中的索引值</li>
<li><p>domEle：遍历后得到的DOM对象</p>
<pre><code>$.each($(&quot;input&quot;),function(index,domEle){
    console.log(domEle.value);
    console.log($(domEle).val());
    console.log(this.value);
    console.log($(this).val());
});
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>$.makeArray(obj) 将类数组对象转换为数组对象</p>
</li>
<li><p>$.inArray(value, array)  查找元素在数组中的位置<br>确定第一个参数在数组中的位置，从0开始(如果没有找到则返回 -1 )</p>
</li>
<li><p>$.toArray() 把jQuery集合中所有DOM元素恢复成一个数组。</p>
</li>
</ul>
<h1 id="jquery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h1><h2 id="jquery-日期插件"><a href="#jQuery-日期插件" class="headerlink" title="jQuery 日期插件"></a>jQuery 日期插件</h2><p>layDate日期插件致力于成为全球最用心的web日期支撑，为国内外所有从事web应用开发的同仁提供力所能及的动力。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;01_laydate插件的基本使用&lt;/title&gt;
    &lt;script src=&quot;laydate/laydate.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;input placeholder=&quot;请输入日期&quot; class=&quot;laydate-icon&quot; onclick=&quot;laydate()&quot;&gt;
    &lt;br&gt;
    &lt;input placeholder=&quot;请输入日期&quot; id=&quot;hello1&quot;&gt;
    &lt;span class=&quot;laydate-icon&quot; onclick=&quot;laydate({elem: &apos;#hello1&apos;});&quot;&gt;&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="laydate-api选项"><a href="#layDate-API选项" class="headerlink" title="layDate API选项"></a>layDate API选项</h3><ul>
<li>elem: ‘#id’, //需显示日期的元素选择器</li>
<li>event: ‘click’, //触发事件</li>
<li>format: ‘YYYY-MM-DD hh!’, //日期格式</li>
<li>istime: false, //是否开启时间选择</li>
<li>isclear: true, //是否显示清空</li>
<li>istoday: true, //是否显示今天</li>
<li>issure: true, 是否显示确认</li>
<li>festival: true //是否显示节日</li>
<li>min: <code>1900-01-01 00:00:00</code>, //最小日期</li>
<li>max: <code>2099-12-31 23:59:59</code>, //最大日期</li>
<li>start: <code>2014-6-15 23:00:00</code>, //开始日期</li>
<li>fixed: false, //是否固定在可视区域</li>
<li>zIndex: 99999999, //css z-index</li>
<li>choose: function(dates){} //选择好日期的回调</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;02_laydate插件的高级使用&lt;/title&gt;
    &lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;laydate/laydate.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;input id=&quot;mydate&quot; placeholder=&quot;请输入日期&quot; class=&quot;laydate-icon&quot;&gt;
    &lt;script&gt;
        laydate({
            elem : &quot;#mydate&quot;,
            event : &quot;focus&quot;,
            istime : true,
            isclear : false,
            istoday : false,
            issure : false
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="表单验证插件"><a href="#表单验证插件" class="headerlink" title="表单验证插件"></a>表单验证插件</h2><p>表单验证插件主要是针对表单元素的值进行验证，并给出响应的图形以及文字提示。</p>
<h3 id="常用验证插件"><a href="#常用验证插件" class="headerlink" title="常用验证插件"></a>常用验证插件</h3><ul>
<li>formValidator</li>
<li>jQuery.validator</li>
<li>easyForm</li>
<li>validate.js</li>
</ul>
<h3 id="jqueryvalidator插件"><a href="#jQuery-validator插件" class="headerlink" title="jQuery.validator插件"></a>jQuery.validator插件</h3><p>该插件提供用户方便地实现表单验证，同时还提供大量的定制选项。<br>官方地址：<a href="http://jqueryvalidation.org/" target="_blank" rel="external">http://jqueryvalidation.org/</a></p>
<ol>
<li>引入必要文件<ul>
<li>引入jQuery库文件</li>
<li>引入插件文件 dist/jquery.validate.js</li>
<li>引入国际化文件 (提示语言文件)<br>dist–localization–message_zh.js 中文提示语言</li>
</ul>
</li>
<li>在HTML页面定义表单<ul>
<li>表单的元素使用HTML5提供的新表单验证功能</li>
<li>required 表示必填项</li>
</ul>
</li>
<li>在JS逻辑中填写<ul>
<li>通过表单调用validate()核心方法<br>$().validate();</li>
</ul>
</li>
</ol>
<h3 id="validation基本使用"><a href="#validation基本使用" class="headerlink" title="validation基本使用"></a>validation基本使用</h3><pre><code>&lt;div id=&quot;main&quot;&gt;
    &lt;p&gt;Take a look at the source to see with metadata.&lt;/p&gt;
    &lt;!-- Custom rules and messages via data- attributes --&gt;
    &lt;form class=&quot;cmxform&quot; id=&quot;commentForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Please enter your email address&lt;/legend&gt;
            &lt;p&gt;
                &lt;label for=&quot;cemail&quot;&gt;E-Mail *&lt;/label&gt;
                &lt;input id=&quot;cemail&quot; name=&quot;email&quot; data-rule-required=&quot;true&quot; 
        data-rule-email=&quot;true&quot; 
        data-msg-required=&quot;Please enter your email address&quot; 
        data-msg-email=&quot;Please enter a valid email address&quot;&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;
            &lt;/p&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;script&gt;
    $(document).ready(function() {
        $(&quot;#commentForm&quot;).validate();
    });
&lt;/script&gt;
</code></pre><h3 id="validate验证方法的选项"><a href="#validate-验证方法的选项" class="headerlink" title="validate()验证方法的选项"></a>validate()验证方法的选项</h3><table><thead><tr><th>选项名称</th><th>描述说明</th></tr></thead><tbody><tr><td>debug</td><td>设置是否为调试模式，如果为调试模式表单不会被提交。</td></tr><tr><td>submitHandler</td><td>表单提交时的回调函数，一般用于提交当前表单。</td></tr><tr><td>rules</td><td>设置表单元素的验证规则，格式为key:value。</td></tr><tr><td>messages</td><td>设置表单元素验证不通过时的错误提示信息。</td></tr><tr><td>errorClass</td><td>自定义错误提示信息的样式。</td></tr><tr><td>ignore</td><td>设置哪些表单元素不进行验证。</td></tr></tbody></table>

<h3 id="validation自定义验证"><a href="#validation自定义验证" class="headerlink" title="validation自定义验证"></a>validation自定义验证</h3><ul>
<li>$().validate(options)</li>
<li><p>rules  自定义的验证规则</p>
<ul>
<li>key 要验证的表单元素的name属性值</li>
<li><p>value 指定使用的验证规则名称</p>
<pre><code>rules : {
   email:true, //输入正确的email格式
   number:true, //输入合法的数字
}
</code></pre></li>
</ul>
</li>
<li><p>equalTo : “相同内容的id”</p>
</li>
<li><p>messages 自定义的错误提示</p>
<pre><code>messages : {
    key : &apos; value &apos;
}
</code></pre></li>
<li><p>自定义错误提示的显示位置(单选和多选框)</p>
<ul>
<li>自定义的错误提示默认出现在第一个被验证的元素后面</li>
<li>自定义的错误提示应该出现在一组验证元素的后面</li>
<li><p>自定义了用于显示错误提示信息的标签</p>
<p>  <code>&lt;label for=&quot;&quot; class=&quot;error&quot;&gt;&lt;/label&gt;</code></p>
</li>
<li><p>class 插件底层的错误提示信息的样式</p>
</li>
<li>for 告知插件当前错误提示信息与哪个指定的验证元素相关</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/c3sHFLa.png" alt=""></p>
<h2 id="自定义验证方法"><a href="#自定义验证方法" class="headerlink" title="自定义验证方法"></a>自定义验证方法</h2><p>jQuery.validator.addMethod( name, method [, message ] )方法</p>
<ul>
<li>name：设置验证方法的名称。</li>
<li>method：回调函数，function(value,element,param){}<ul>
<li>value：元素的值</li>
<li>element：元素本身</li>
<li>param：参数</li>
</ul>
</li>
<li>message：设置验证不通过的错误提示信息。</li>
</ul>
<h1 id="jquery-ui"><a href="#jQuery-UI" class="headerlink" title="jQuery  UI"></a>jQuery  UI</h1><p>jQuery UI能做的事可谓是包罗万象。实际上，jQuery UI在某种意义上并不是插件，而是一个完整的插件库。</p>
<p>jQuery UI中主要包含以下几个功能：</p>
<ul>
<li>Effect（效果）</li>
<li>Interactions（交互组件）</li>
<li>Widget（部件）</li>
<li>此外，还为jQuery和核心动画提供了很多高级效果。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>引入ui – jquery-ui.js</li>
<li>引入themes – base – jquery-ui.css / imagse(同级目录)</li>
<li>引入demos – demos.css</li>
</ul>
<h2 id="effect效果"><a href="#Effect（效果）" class="headerlink" title="Effect（效果）"></a>Effect（效果）</h2><h3 id="animate-方法"><a href="#animate-方法" class="headerlink" title="animate( )方法"></a>animate( )方法</h3><p>文档在引入核心效果文件的情况下，扩展的.animate()方法可接受另外一些样式属性。</p>
<p>扩展后animate方法接受以下属性：</p>
<ul>
<li>backgroundColor</li>
<li>borderBottomColor</li>
<li>borderLeftColor</li>
<li>borderRightColor</li>
<li>borderTopColor</li>
<li>Color</li>
<li>outlineColor</li>
</ul>
<pre><code>var state = true;
$( &quot;#button&quot; ).click(function() {
    if ( state ) {
        $( &quot;#effect&quot; ).animate({
            backgroundColor: &quot;#aa0000&quot;,
            color: &quot;#fff&quot;,
            width: 500
        }, 1000 );
    } else {
        $( &quot;#effect&quot; ).animate({
            backgroundColor: &quot;#fff&quot;,
            color: &quot;#000&quot;,
            width: 240
        }, 1000 );
    }
    state = !state;
});
</code></pre><h3 id="effect-方法"><a href="#effect-方法" class="headerlink" title="effect( )方法"></a>effect( )方法</h3><ul>
<li><p>扩展后animate()方法接受以下属性：</p>
<p>  backgroundColor<br>  borderBottomColor<br>  borderLeftColor<br>  borderRightColor<br>  borderTopColor<br>  Color<br>  outlineColor</p>
</li>
</ul>
<p><img src="http://i.imgur.com/nOxK2i0.png" alt=""></p>
<h2 id="interactions交互组件"><a href="#Interactions（交互组件）" class="headerlink" title="Interactions（交互组件）"></a>Interactions（交互组件）</h2><h3 id="draggable-widget"><a href="#Draggable-Widget" class="headerlink" title="Draggable Widget"></a>Draggable Widget</h3><p> $( “#draggable” ).draggable();</p>
<ul>
<li>start：当拖动开始时触发。</li>
<li>drag：当鼠标在拖动过程中移动时触发。</li>
<li><p>stop：当拖动停止时触发。</p>
<p>draggable()的选项</p>
</li>
<li>约束运动<ul>
<li>axis：设置只能在x轴或y轴方向拖动。</li>
<li>containment：设置在某个区域内拖动。</li>
</ul>
</li>
<li><p>光标样式</p>
<ul>
<li>cursor：设置拖动时鼠标的样式。</li>
<li>cursorAt：设置鼠标的相对定位。</li>
<li>handle：设置指定元素触发鼠标按下事件才能拖动。</li>
<li>cancel：防止在指定元素上拖动。</li>
<li>revert：当停止拖动时，元素是否被重置到初始位置。</li>
<li>snap：拖动元素是否吸附在其他元素。</li>
<li>snapMode：设置拖动元素吸附指定元素的哪个边缘。</li>
<li>snap设置为true时该选项有效。<ul>
<li>inner|outer|both<br><code>$( &quot;&quot; ).draggable({ snap: &quot;#id&quot;, snapMode: &quot;outer&quot; });</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Draggable Widget允许使用鼠标移动元素。</p>
</li>
</ul>
<pre><code>&lt;div id=&quot;draggable&quot; class=&quot;ui-widget-content&quot;&gt;
    &lt;p&gt;Drag me around&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
    $( &quot;#draggable&quot; ).draggable();
&lt;/script&gt;
</code></pre><p>Droppable Widget为可拖拽小部件创建目标。</p>
<ul>
<li>droppable()的事件<ul>
<li>drop：该事件在被允许拖放的元素覆盖时触发。</li>
</ul>
</li>
<li>droppable()的选项<ul>
<li>accept：指定可拖动的元素可被接受。</li>
<li>activeClass：被允许拖放的元素覆盖时，改变样式。</li>
<li>hoverClass：被允许拖放的元素悬停时，改变样式。</li>
</ul>
</li>
</ul>
<h3 id="jquery-ui-resizeable-缩放效果"><a href="#jQuery-UI-Resizeable-缩放效果" class="headerlink" title="jQuery UI Resizeable 缩放效果"></a>jQuery UI Resizeable 缩放效果</h3><ul>
<li><p>使用鼠标改变元素的尺寸</p>
<pre><code>$( &quot;#resizable&quot; ).resizable();
</code></pre></li>
</ul>
<h3 id="jquery-ui-selectable-元素选择效果"><a href="#jQuery-UI-selectable-元素选择效果" class="headerlink" title="jQuery UI selectable 元素选择效果"></a>jQuery UI selectable 元素选择效果</h3><ul>
<li><p>使用鼠标选择单个元素或一组元素</p>
<pre><code>$( &quot;#selectable&quot; ).selectable();
</code></pre></li>
</ul>
<h3 id="jquery-ui-sortable-排序效果"><a href="#jQuery-UI-Sortable-排序效果" class="headerlink" title="jQuery UI Sortable 排序效果"></a>jQuery UI Sortable 排序效果</h3><ul>
<li><p>使用鼠标调整列表中或者网格中元素的排序</p>
<pre><code>$( &quot;#sortable&quot; ).sortable();
</code></pre></li>
</ul>
<h2 id="widget-部件"><a href="#Widget-部件" class="headerlink" title="Widget (部件)"></a>Widget (部件)</h2><h3 id="jquery-ui-accordion-折叠面板效果"><a href="#jQuery-UI-Accordion-折叠面板效果" class="headerlink" title="jQuery UI Accordion  折叠面板效果"></a>jQuery UI Accordion  折叠面板效果</h3><ul>
<li>在一个有限的空间内显示用于呈现信息的可折叠的内容面板。<br>  <code>$( &quot;#accordion&quot; ).accordion();</code><blockquote>
<p><strong>需要注意的是：</strong></p>
<ul>
<li>使用<code>&lt;div&gt;</code>元素作为折叠面板的容器。</li>
<li>使用<code>&lt;h3&gt;</code>元素作为折叠面板的标题。</li>
<li>使用<code>&lt;div&gt;</code>元素作为折叠面板的内容。</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="jquery-ui-autocomlete-自动检索"><a href="#jQuery-UI-Autocomlete-自动检索" class="headerlink" title="jQuery UI Autocomlete  自动检索"></a>jQuery UI Autocomlete  自动检索</h3><ul>
<li>根据用户输入值进行搜索和过滤，让用户快速找到并从预设值列表中选择。<br>  <code>$( &quot;#autocomlete&quot; ).autocomlete();</code></li>
</ul>
<h3 id="jquery-ui-button-按钮效果"><a href="#jQuery-UI-Button-按钮效果" class="headerlink" title="jQuery UI Button  按钮效果"></a>jQuery UI Button  按钮效果</h3><ul>
<li>在一个有限的空间内显示用于呈现信息的可折叠的内容面板。<br>  <code>$( &quot;#button&quot; ).button();</code></li>
</ul>
<h3 id="jquery-ui-datepicker-日历选择器"><a href="#jQuery-UI-Datepicker-日历选择器" class="headerlink" title="jQuery UI  Datepicker 日历选择器"></a>jQuery UI  Datepicker 日历选择器</h3><ul>
<li><p>Datepicker Widget从弹出框或在线日历选择一个日期。</p>
<pre><code>&lt;p&gt;Date: &lt;input type=&quot;text&quot; id=&quot;datepicker&quot;&gt;&lt;/p&gt;
&lt;script&gt;
    $( &quot;#datepicker&quot; ).datepicker();
&lt;/script&gt;
</code></pre></li>
</ul>
<h3 id="jquery-ui-dialog对话框"><a href="#jQuery-UI-Dialog对话框" class="headerlink" title="jQuery UI  Dialog对话框"></a>jQuery UI  Dialog对话框</h3><p>Dialog Widget在一个交互覆盖层中打开内容。</p>
<ul>
<li>基本对话框示例</li>
</ul>
<pre><code>&lt;div id=&quot;dialog&quot; title=&quot;Basic dialog&quot;&gt;
    &lt;p&gt;This is the default dialog which is useful for displaying information. 
        The dialog window can be moved, resized and closed with the &apos;x&apos; icon.&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
    $( &quot;#dialog&quot; ).dialog();
&lt;/script&gt;
</code></pre><ul>
<li>模式对话框示例</li>
</ul>
<pre><code>&lt;div id=&quot;dialog-modal&quot; title=&quot;Basic modal dialog&quot;&gt;
    &lt;p&gt;Adding the modal overlay screen makes the dialog look 
        more prominent because it dims out the page content.&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
    $( &quot;#dialog-modal&quot; ).dialog({
        modal: true
    });
&lt;/script&gt;
</code></pre><ul>
<li>操作对话框示例</li>
</ul>
<pre><code>&lt;div id=&quot;dialog&quot; title=&quot;Basic dialog&quot;&gt;
    &lt;p&gt;This is an animated dialog which is useful for displaying information.
    The dialog window can be moved, resized and closed with the &apos;x&apos; icon.&lt;/p&gt;
&lt;/div&gt;

&lt;button id=&quot;opener&quot;&gt;Open Dialog&lt;/button&gt;

&lt;script&gt;
    $( &quot;#dialog&quot; ).dialog({
        autoOpen: false,
        show: {
            effect: &quot;blind&quot;,
            duration: 1000
        },
        hide: {
            effect: &quot;explode&quot;,
            duration: 1000
        },
        buttons : {
            &quot;OK&quot;: function() {
                $( this ).dialog( &quot;close&quot; );
            },
            Cancel: function() {
                $( this ).dialog( &quot;close&quot; );
            }
        }
    });

    $( &quot;#opener&quot; ).button().click(function() {
        $( &quot;#dialog&quot; ).dialog( &quot;open&quot; );
    });
&lt;/script&gt;
</code></pre><h3 id="jquery-ui-tabs页签"><a href="#jQuery-UI-Tabs页签" class="headerlink" title="jQuery UI Tabs页签"></a>jQuery UI Tabs页签</h3><ul>
<li>Tabs Widget是一种多面板的单内容区，每个面板与列表中的标题相关。<br>  <code>$( &quot;#tabs&quot; ).tabs();</code></li>
</ul>
<h3 id="tooltip-widget"><a href="#Tooltip-Widget" class="headerlink" title="Tooltip Widget"></a>Tooltip Widget</h3><ul>
<li><p>Tooltip Widget可自定义的、可主题化的工具提示框，替代原生的工具提示框。</p>
<pre><code>&lt;p&gt;
    &lt;label for=&quot;age&quot;&gt;Your age:&lt;/label&gt;
    &lt;input id=&quot;age&quot; title=&quot;We ask for your purposes.&quot;&gt;
&lt;/p&gt;
&lt;script&gt;
    $( document ).tooltip();
&lt;/script&gt;
</code></pre></li>
</ul>
<h3 id="jquery-ui-menu-菜单"><a href="#jQuery-UI-Menu-菜单" class="headerlink" title="jQuery UI  Menu 菜单"></a>jQuery UI  Menu 菜单</h3><ul>
<li>带有鼠标和键盘交互的用于导航的可主题化菜单<br>  <code>$( &quot;#menu&quot; ).menu();</code></li>
</ul>
<h3 id="jquery-ui-progressbar-进度条"><a href="#jQuery-UI-Progressbar-进度条" class="headerlink" title="jQuery UI  Progressbar 进度条"></a>jQuery UI  Progressbar 进度条</h3><ul>
<li>显示一个确定的或不确定的进程状态<br>  <code>$( &quot;#progressbar&quot; ).progressbar({});</code></li>
</ul>
<h3 id="jquery-ui-slider-滑块"><a href="#jQuery-UI-Slider-滑块" class="headerlink" title="jQuery UI  Slider  滑块"></a>jQuery UI  Slider  滑块</h3><ul>
<li>滑槽滑块<br>  <code>$( &quot;#slider&quot; ).slider();</code></li>
</ul>
<h3 id="jquery-ui-tab键提示信息"><a href="#jQuery-UI-tab键提示信息" class="headerlink" title="jQuery UI tab键提示信息"></a>jQuery UI tab键提示信息</h3><ul>
<li>悬停在链接上，或者使用 tab 键循环切换聚焦在每个元素上。<br>  <code>$( document ).tooltip();</code></li>
</ul>
<h3 id="jquery-ui-spinner-旋转器"><a href="#jQuery-UI-Spinner-旋转器" class="headerlink" title="jQuery UI  Spinner 旋转器"></a>jQuery UI  Spinner 旋转器</h3><ul>
<li>通过向上/向下按钮和箭头键处理，为输入数值增强文本输入功能。</li>
<li><code>$( &#39;#spinner&#39;).spinner();</code></li>
</ul>
<h3 id="menu-widget"><a href="#Menu-Widget" class="headerlink" title="Menu Widget"></a>Menu Widget</h3><p>Menu Widget带有鼠标和键盘交互的用于导航的可主题化菜单。</p>
<ul>
<li>禁用页面中默认的鼠标右键功能。</li>
</ul>
<pre><code>$(document).contextmenu(function (event) {
    event.preventDefault();
});
</code></pre><ul>
<li>自定义鼠标右键菜单。</li>
</ul>
<pre><code>$(document).mousedown(function (event) {
    if(event.button == 2){
        $( &quot;#menu&quot;).removeAttr(&quot;style&quot;).menu().position({
            my: &quot;left top&quot;,
            at: &quot;left top&quot;,
            of : event,
            collision: &quot;fit&quot;
        });
    }
});
</code></pre><p><img src="http://i.imgur.com/zhmd2OO.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jquery中的事件&quot;&gt;&lt;a href=&quot;#jQuery中的事件&quot; class=&quot;headerlink&quot; title=&quot;jQuery中的事件&quot;&gt;&lt;/a&gt;jQuery中的事件&lt;/h1&gt;&lt;h2 id=&quot;页面加载&quot;&gt;&lt;a href=&quot;#页面加载&quot; class=&quot;head
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(一)</title>
    <link href="http://yoursite.com/2017/08/04/jQuery-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/08/04/jQuery-一/</id>
    <published>2017-08-04T07:55:55.000Z</published>
    <updated>2017-08-10T08:01:57.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery入门"><a href="#jQuery入门" class="headerlink" title="jQuery入门"></a>jQuery入门</h1><h2 id="javascript类库"><a href="#JavaScript类库" class="headerlink" title="JavaScript类库"></a>JavaScript类库</h2><ul>
<li><strong>作用：</strong>JavaScript类库的出现，就是为了简化JavaScript的开发。</li>
<li><strong>内容：</strong>JavaScript类库封装了预定义的对象和函数。</li>
<li><strong>目的：</strong>帮助开发人员建立有高难度交互的Web 2.0特性的富客户端页面，并且兼容各大浏览器。</li>
</ul>
<blockquote>
<p><strong>扩展内容</strong><br>Web 2.0相关概念：</p>
<ol>
<li>Web 1.0：网络 -&gt; 人（单向信息。网络是信息提供者，单向的提供和单一理解）</li>
<li>Web 2.0：人 -&gt; 人（以网络为沟通渠道进行人与人沟通。网络是平台，用户提供信息，通过网络，其他用户获取信息）</li>
<li>Web 3.0：人 -&gt; 网络 -&gt; 人（人与网络之间的双向沟通。网络成为用户需求理解者和提供者）</li>
</ol>
<p>富客户端与瘦客户端：</p>
<ol>
<li>富客户端：（Rich Internet Applications，RIA）利用具有很强交互性的富客户端技术来为用户提供一个更高和更全方位的网络体验。</li>
<li>瘦客户端：（Thin Client）指的是在客户端-服务器网络体系中的一个基本无需应用程序的计算机终端。</li>
</ol>
</blockquote>
<h2 id="jquery的编程步骤"><a href="#jQuery的编程步骤" class="headerlink" title="jQuery的编程步骤"></a>jQuery的编程步骤</h2><ul>
<li><p>在HTML页面引入jQuery文件</p>
<pre><code>&lt;!-- 1\. 引入jQuery文件 --&gt;
&lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt;
</code></pre></li>
</ul>
<ul>
<li><p>在HTML页面定义元素</p>
<pre><code>&lt;!-- 定义HTML页面元素 --&gt;
&lt;input type=&quot;text&quot; value=&quot;请输入你的用户名&quot; id=&quot;username&quot;&gt;
</code></pre></li>
</ul>
<ul>
<li>使用jQuery的选择器定位元素</li>
</ul>
<pre><code>// 2. 使用jQuery选择器定位HTML页面元素
var $username = $(&quot;#username&quot;);
</code></pre><ul>
<li>利用jQuery提供的API完成需求</li>
</ul>
<pre><code>// 3. 调用jQuery的API方法
console.log($username.val());
</code></pre><hr>
<h1 id="jquery基础内容"><a href="#jQuery基础内容" class="headerlink" title="jQuery基础内容"></a>jQuery基础内容</h1><h2 id="jquery工厂函数"><a href="#jQuery工厂函数" class="headerlink" title="jQuery工厂函数"></a>jQuery工厂函数</h2><p>jQuery的工厂函数算做是jQuery的一个入口，通过它既可以使用选择器，也可以包装DOM对象，还可以创建元素等功能。</p>
<p><strong>工厂函数的写法有两种：</strong></p>
<ul>
<li>第一种是<code>$( )</code></li>
<li>第二种是<code>jQuery( )</code></li>
</ul>
<blockquote>
<p>这里的”$”符号就表示jQuery，是jQuery的一个约定。<br>不仅如此，jQuery也建议通过jQuery获取的元素变量前都增加”$”符号。目前有很多JS库都效仿了jQuery的这种做法，当然也引起了多个使用””的JS库一起使用时的一些冲突，主要还是集中在”$”的使用权上。</p>
</blockquote>
<h2 id="jquery对象与dom对象"><a href="#jQuery对象与DOM对象" class="headerlink" title="jQuery对象与DOM对象"></a>jQuery对象与DOM对象</h2><ul>
<li>DOM对象<ul>
<li>定义：是指通过DOM获取的元素。</li>
</ul>
</li>
<li>jQuery对象<ul>
<li>定义：是通过包装DOM对象后产生的一种对象（jQuery自定义的全局对象）。</li>
<li>可以说jQuery底层其实还是DOM对象。</li>
<li><strong>注意：</strong>jQuery是类数组对象，所以jQuery对象中可能包含多个DOM对象或一个DOM对象，这要看具体情况。</li>
</ul>
</li>
<li>DOM对象转换为jQuery对象<ul>
<li>DOM对象要想转换为jQuery对象，需要使用jQuery的工厂函数 $( ) 将其包裹，返回的就是对应的jQuery对象。</li>
</ul>
</li>
</ul>
<pre><code>// DOM对象
var username = document.getElementById(&quot;username&quot;);
// DOM对象转换为jQuery对象
var $username = $(username);
// 测试
console.log($username.val());
</code></pre><ul>
<li>jQuery对象转换为DOM对象<ul>
<li>jQuery对象是数组对象。jQuery对象[索引值]可以直接转换为对应的DOM对象</li>
</ul>
</li>
</ul>
<pre><code> // jQuery对象
 var $user = $(&quot;#username&quot;);
 // 1\. jQuery对象是数组对象
 var user1 = $user[0];
 // 测试
 console.log(user1.value);


jQuery提供了get(index)方法。jQuery对象.get(索引值)也可以转换为对应的DOM对象


 // jQuery对象
 var $user = $(&quot;#username&quot;);
 // 2\. jQuery提供get(index)方法进行转换
 var user2 = $user.get(0);
 // 测试
 console.log(user2.value);
</code></pre><h1 id="jquery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><p>jQuery的选择器的想法是源于CSS中的选择器的用法，其实在JavaScript中也有类似的用法，比如querySelector( )或querySelectorAll( )方法的使用，也是借助CSS中的选择器来定位HTML页面元素的。只不过相比jQuery中的选择器，JavaScript中的querySelector( )或querySelectorAll( )方法的性能相对差一些而已。</p>
<p>jQuery的选择器最主要的作用就是用于定位HTML页面的元素。它不仅可以定位HTML页面中具体某个元素，还可以通过各种方式定位复合条件的一组元素等等。</p>
<p>jQuery的选择器最大的特点就是将定位元素和元素行为进行了有效的分离。这是在实际开发中非常必要的一项特点！</p>
<h1 id="jquery选择器的种类"><a href="#jQuery选择器的种类" class="headerlink" title="jQuery选择器的种类"></a>jQuery选择器的种类</h1><p>jQuery中使用其工厂函数 $( ) 作为容器，来接收jQuery的选择器内容。而jQuery的选择器则以字符串形式传递给jQuery的工厂函数。jQuery的选择器种类大概可以分为以下几种：</p>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><pre><code>// 通过元素的 id 属性值获取
$(&apos;#btn1&apos;).click(function(){
    $(&apos;#one&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
// 选取带有指定class属性值
$(&apos;#btn2&apos;).click(function(){
    $(&apos;.mini&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
// 选择元素名 element 的元素
$(&apos;#btn3&apos;).click(function(){
    $(&apos;div&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
//选择所有元素 (多用于上下文搜索)
$(&apos;#btn4&apos;).click(function(){
    $(&apos;*&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
//并集选择器
$(&apos;#btn5&apos;).click(function(){
    $(&apos;span,#two&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>通配符选择器（*）默认匹配HTML页面中所有的元素。</li>
<li>复合选择器（多个选择器并列使用）的使用，每个选择器之间使用”,”进行分割。并且复合选择器匹配的结果是多个选择器的并集效果。</li>
</ol>
</blockquote>
<h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><pre><code>//选择祖先元素下所有的后代元素
$(&apos;#btn1&apos;).click(function(){
    $(&apos;body div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选择父元素下匹配的所有子元素
$(&apos;#btn2&apos;).click(function(){
    $(&apos;body &gt; div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选取紧接某元素后的下一个元素
$(&apos;#btn3&apos;).click(function(){
    $(&apos;.one + div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选取某元素后的所有兄弟元素
$(&apos;#btn4&apos;).click(function(){
    $(&apos;#two ~ div&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<p>selectors~selector2选择器，是获取符合selector1选择器的元素后面所有符合selector2选择器的兄弟元素。jQuery中还有一个方法siblings( )，是获取指定元素的所有兄弟元素。</p>
</blockquote>
<h2 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h2><pre><code>//获取第一个元素
$(&apos;#btn1&apos;).click(function(){
    $(&apos;div:first&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//获取最后一个元素
$(&apos;#btn2&apos;).click(function(){
    $(&apos;div:last&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})

//去除所有与选定选择器匹配的元素
//选择class不为one的 所有div元素.
$(&apos;#btn3&apos;).click(function(){
    $(&apos;div:not(.one)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})

//获取索引值为偶数的. 从0开始计数
$(&apos;#btn4&apos;).click(function(){
    $(&apos;div:even&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//获取索引值为奇数的. 从0开始计数
$(&apos;#btn5&apos;).click(function(){
    $(&apos;div:odd&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//选取指定索引值的元素 从0开始计数
$(&apos;#btn6&apos;).click(function(){
    $(&apos;div:eq(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//选取所有大于指定索引值的元素 great than
$(&apos;#btn7&apos;).click(function(){
    $(&apos;div:gt(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//选取所有小于指定索引值的元素 less than
$(&apos;#btn8&apos;).click(function(){
    $(&apos;div:lt(3)&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//选择 所有的标题元素.比如h1, h2, h3等等...
$(&apos;#btn9&apos;).click(function(){
    $(&apos;:header&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
})
//选择 当前正在执行动画的所有元素.
$(&apos;#btn10&apos;).click(function(){
    $(&apos;:animated&apos;).css(&quot;background&quot;,&quot;#bfa&quot;);
});
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>“:not(selector)”选择器，不仅可以匹配到class属性值不是one的元素，还匹配到没有class属性的元素。这不仅仅只是一个反操作的过程。</li>
<li>“:even”和”:odd”选择器，表示索引值为偶数或者索引值为奇数的元素，但是需要注意的是索引值是从 0 开始的。</li>
<li>:header”选择器，是匹配 h1 - h6 标题元素，并不能匹配指定的某个标题元素。如果需要匹配具体某个标题元素可以使用元素选择器，所以这种用法在实际开发中很少见到。</li>
<li>“:animated”选择器，是匹配正在执行动画效果的元素，但需要注意的是它只能匹配jQuery执行的动画效果，而不能匹配其他技术实现的动画效果。</li>
</ol>
</blockquote>
<h2 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h2><pre><code>//查找包含某个文本的元素
$(&apos;#btn1&apos;).click(function(){
    $(&apos;div:contains(di)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选取所有不包含子元素或者文本的空元素
$(&apos;#btn2&apos;).click(function(){
    $(&apos;div:empty&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选取含有子元素或者文本的元素
$(&apos;#btn3&apos;).click(function(){
    $(&apos;div:has(.mini)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//指定目标前的指定父元素
$(&apos;#btn4&apos;).click(function(){
    $(&apos;div:parent&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>“:has(selector)”选择器，匹配含有符合selector选择器元素的元素，并不是匹配符合selector的元素。</li>
</ol>
</blockquote>
<h2 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h2><pre><code>//获取所有不可见元素，或者type为hidden的元素
$(&apos;#btn_hidden&apos;).click(function(){
    $(&apos;div:hidden&apos;).show(3000).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//选取所有可见的元素.
$(&apos;#btn_visible&apos;).click(function(){
    $(&apos;div:visible&apos;).css(&quot;background&quot;,&quot;#FF6500&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>show( )方法表示将隐藏的元素显示，其参数表示动画执行的时长。（后面的内容会详细讲到）。</li>
</ol>
</blockquote>
<h2 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h2><pre><code>//获取含有属性名的元素
$(&apos;#btn1&apos;).click(function(){
    $(&apos;div[title]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

//[attribute=value]  获取属性等于某个属性值的元素
$(&apos;#btn2&apos;).click(function(){
    $(&apos;div[title=test]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

// [attribute!=value]  获取属性不等于某个属性值的元素
$(&apos;#btn3&apos;).click(function(){
    $(&apos;div[title!=test]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

//[attribute^=value]  获取属性以某些值开头的元素
$(&apos;#btn4&apos;).click(function(){
    $(&apos;div[title^=te]&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

//[attribute$=value]  获取属性以某些值结尾的元素
$(&apos;#btn5&apos;).click(function(){
    $(&quot;div[title$=est]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

//[attribute*=value]  获取属性包含某些值的元素
$(&apos;#btn6&apos;).click(function(){
    $(&quot;div[title*=es]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})

//[selector1][selector2][selectorN] 交集选择器
//需要同时满足多个条件时使用
$(&apos;#btn7&apos;).click(function(){
    $(&quot;div[id][title*=es]&quot;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>“[attrName!=value]”选择器，匹配attrName属性的值不等于value的元素，但也包含没有attrName属性的所有元素。</li>
<li>“[attribute][attribute]”属性复合选择器，是多个属性过滤选择器并列使用，匹配的结果是多个属性过滤选择器的交集。</li>
</ol>
</blockquote>
<h2 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h2><pre><code>//:nth-child( index )选取父元素下的第N个子或奇偶元素  index 从 1 开始
$(&apos;#btn1&apos;).click(function(){
    $(&apos;div.one :nth-child(2)&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//:first-child 父元素下的第一个子元素
$(&apos;#btn2&apos;).click(function(){
    $(&apos;div.one :first-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//:last-child  父元素下的最后一个子元素
$(&apos;#btn3&apos;).click(function(){
    $(&apos;div.one :last-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
//:only-child 选取某个元素是父元素中唯一的子元素
$(&apos;#btn4&apos;).click(function(){
    $(&apos;div.one :only-child&apos;).css(&quot;background&quot;,&quot;#bbffaa&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>子元素过滤选择器的特殊用法，就是在其前面需要增加空格。不然子元素过滤选择器将不会有效果！</li>
<li>“nth-child(index)”选择器中的index是从 0 开始的。</li>
</ol>
</blockquote>
<h2 id="表单对象属性过滤选择器"><a href="#表单对象属性过滤选择器" class="headerlink" title="表单对象属性过滤选择器"></a>表单对象属性过滤选择器</h2><pre><code>//:enabled    获取所有input元素
$(&apos;#btn1&apos;).click(function(){
    $(&quot;#form1 input:enabled&quot;).val(&quot;这里变化了！&quot;);
    return false;
})
//:disabled     获取所有不可用input元素
$(&apos;#btn2&apos;).click(function(){
    $(&quot;#form1 input:disabled&quot;).val(&quot;这里变化了！&quot;);
    return false;
})
//:checked     获取所有选中框元素(单选框, 复选框)
$(&quot;:checkbox&quot;).click(countChecked);
function countChecked() {
    var n = $(&quot;input:checked&quot;).length;
    $(&quot;div&quot;).eq(0).html(&quot;&lt;strong&gt;有&quot;+n+&quot; 个被选中!&lt;/strong&gt;&quot;);
}
//:selected     获取所有选中的option元素
$(&quot;select&quot;).change(function () {
    var str = &quot;&quot;;
    $(&quot;select :selected&quot;).each(function () {
         str += $(this).text() + &quot;,&quot;;
    });
    $(&quot;div&quot;).eq(1).html(&quot;&lt;strong&gt;你选中的是：&quot;+str+&quot;&lt;/strong&gt;&quot;);
})
</code></pre><blockquote>
<p><strong>需要注意</strong></p>
<ol>
<li>“:checked”选择器，匹配checkbox和radio元素中被选中的。</li>
<li>“:selected”选择器，匹配select元素中option元素被选中的。</li>
</ol>
</blockquote>
<h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><pre><code>var $alltext = $(&quot;#form1 :text&quot;);
var $allpassword= $(&quot;#form1 :password&quot;);
var $allradio= $(&quot;#form1 :radio&quot;);
var $allcheckbox= $(&quot;#form1 :checkbox&quot;);

var $allsubmit= $(&quot;#form1 :submit&quot;);
var $allimage= $(&quot;#form1 :image&quot;);
var $allreset= $(&quot;#form1 :reset&quot;);
var $allbutton= $(&quot;#form1 :button&quot;); // &lt;input type=button /&gt;  和 &lt;button &gt;&lt;/button&gt;都可以匹配
var $allfile= $(&quot;#form1 :file&quot;);
var $allhidden= $(&quot;#form1 :hidden&quot;); // &lt;input type=&quot;hidden&quot; /&gt;和&lt;div style=&quot;display:none&quot;&gt;test&lt;/div&gt;都可以匹配.
var $allselect = $(&quot;#form1 select&quot;);
var $alltextarea = $(&quot;#form1 textarea&quot;);

var $AllInputs = $(&quot;#form1 :input&quot;);
var $inputs = $(&quot;#form1 input&quot;);

$(&quot;div&quot;).append(&quot; 有&quot; + $alltext.length + &quot; 个（ :text 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allpassword.length + &quot; 个（ :password 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allradio.length + &quot; 个（ :radio 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allcheckbox.length + &quot; 个（ :checkbox 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allsubmit.length + &quot; 个（ :submit 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allimage.length + &quot; 个（ :image 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allreset.length + &quot; 个（ :reset 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allbutton.length + &quot; 个（ :button 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allfile.length + &quot; 个（ :file 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allhidden.length + &quot; 个（ :hidden 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $allselect.length + &quot; 个（ select 元素）&lt;br/&gt;&quot;)
        .append(&quot; 有&quot; + $alltextarea.length + &quot; 个（ textarea 元素）&lt;br/&gt;&quot;)
        .append(&quot; 表单有 &quot; + $inputs.length + &quot; 个（input）元素。&lt;br/&gt;&quot;)
        .append(&quot; 总共有 &quot; + $AllInputs.length + &quot; 个(:input)元素。&lt;br/&gt;&quot;)
        .css(&quot;color&quot;, &quot;red&quot;)

$(&quot;form&quot;).submit(function () { return false; }); // return false;不能提交.
</code></pre><h1 id="jquery的dom操作"><a href="#jQuery的DOM操作" class="headerlink" title="jQuery的DOM操作"></a>jQuery的DOM操作</h1><p>DOM是Document Object Model的缩写，译为文档对象模型。根据W3C DOM规范，DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松地访问页面中所有的标准组件。</p>
<p>jQuery中另一个重要的组成部分就是封装了原生DOM的操作。</p>
<h2 id="html操作"><a href="#html操作" class="headerlink" title="html操作"></a>html操作</h2><p>html( )方法用于读取或设置指定元素的HTML代码，类似于原生DOM中的innerHTML属性。</p>
<pre><code>//获取&lt;p&gt;元素的HTML代码
$(&quot;input:eq(0)&quot;).click(function(){
    alert(  $(&quot;p&quot;).html() );
});
//设置&lt;p&gt;元素的HTML代码
$(&quot;input:eq(1)&quot;).click(function(){
    $(&quot;p&quot;).html(&quot;&lt;strong&gt;你最讨厌的水果是?&lt;/strong&gt;&quot;);
});
</code></pre><h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><p>text( )方法用于读取或设置指定元素的文本内容，类似于原生DOM中的textContent属性。</p>
<pre><code>//获取&lt;p&gt;元素的文本
$(&quot;input:eq(0)&quot;).click(function(){
    alert(  $(&quot;p&quot;).text() );
});
//设置&lt;p&gt;元素的文本
$(&quot;input:eq(1)&quot;).click(function(){
    $(&quot;p&quot;).text(&quot;你最讨厌的水果是?&quot;);
});
</code></pre><h2 id="值操作"><a href="#值操作" class="headerlink" title="值操作"></a>值操作</h2><p>val( )方法用于读取或设置指定元素的value属性值，类似于原生DOM中的value属性。</p>
<pre><code>//获取按钮的value值
$(&quot;input:eq(0)&quot;).click(function(){
   alert( $(this).val() );
});
//设置按钮的value值
$(&quot;input:eq(1)&quot;).click(function(){
   $(this).val(&quot;我被点击了!&quot;);
});
</code></pre><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><ul>
<li>attr( )方法用于获取或设置指定元素的属性，类似于原生DOM中的getAttribute()方法和setAttribute()方法。</li>
<li>removeAttr( )方法用于删除指定元素的属性，类似于原生DOM中的removeAttribute()方法。</li>
</ul>
<pre><code>//设置&lt;p&gt;元素的属性&apos;title&apos;
$(&quot;input:eq(0)&quot;).click(function(){
   $(&quot;p&quot;).attr(&quot;title&quot;,&quot;选择你最喜欢的水果.&quot;);
});
//获取&lt;p&gt;元素的属性&apos;title&apos;
$(&quot;input:eq(1)&quot;).click(function(){
   alert( $(&quot;p&quot;).attr(&quot;title&quot;) );
});
//删除&lt;p&gt;元素的属性&apos;title&apos;
$(&quot;input:eq(2)&quot;).click(function(){
   $(&quot;p&quot;).removeAttr(&quot;title&quot;);
});
</code></pre><hr>
<h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><p>操作样式主要分成两种：</p>
<ul>
<li>一种是使用style属性直接设置CSS中的属性</li>
<li>一种是使用class样式名称设置CSS。</li>
</ul>
<h3 id="attr-方法操作"><a href="#attr-方法操作" class="headerlink" title="attr( )方法操作"></a>attr( )方法操作</h3><p>class本身就是元素中的一个属性，所以也可以使用设置属性方式来设置或删除class样式。</p>
<p><strong>语法结构：</strong><code>element.attr(&quot;class&quot;,className)</code></p>
<blockquote>
<p><strong>值得注意的是：</strong>使用attr( )方法设置class样式时，无论之前是否包含class属性，之前设置的样式都会被覆盖。</p>
</blockquote>
<pre><code>//&lt;input type=&quot;button&quot; value=&quot;采用属性增加样式&quot;  id=&quot;b1&quot;/&gt;
$(&quot;#b1&quot;).click(function(){
   $(&quot;#mover&quot;).attr(&quot;class&quot;,&quot;one&quot;);
})
</code></pre><h3 id="addclass-方法操作"><a href="#addClass-方法操作" class="headerlink" title="addClass( )方法操作"></a>addClass( )方法操作</h3><p>addClass( )方法表示追加样式，也就是说，无论之前是否包含class样式，调用addClass( )方法只是在其基础上增加一个新的样式。而之前设置的样式依旧存在。</p>
<pre><code>//&lt;input type=&quot;button&quot; value=&quot; addClass&quot;  id=&quot;b2&quot;/&gt;
$(&quot;#b2&quot;).click(function(){
   $(&quot;#mover&quot;).addClass(&quot;mini&quot;);
})
</code></pre><h3 id="removeclass-方法操作"><a href="#removeClass-方法操作" class="headerlink" title="removeClass( )方法操作"></a>removeClass( )方法操作</h3><p>removeClass( )方法表示删除样式，但该方法的使用有以下三种方式：</p>
<ul>
<li>removeClass()，默认不传递任何参数，表示删除所有样式。</li>
<li>removeClass(className)，传递一个样式名称，表示删除指定一个样式。</li>
<li>removeClass(className1 className2),传递多个样式名称，中间使用空格隔开，表示删除指定多个样式。</li>
</ul>
<pre><code>//&lt;input type=&quot;button&quot; value=&quot;removeClass&quot;  id=&quot;b3&quot;/&gt;
$(&quot;#b3&quot;).click(function(){
   $(&quot;#mover&quot;).removeClass();
})
</code></pre><h3 id="toggleclass-方法操作"><a href="#toggleClass-方法操作" class="headerlink" title="toggleClass( )方法操作"></a>toggleClass( )方法操作</h3><p>toggleClass( )方法表示在没有样式与指定样式之间进行切换，效果相当于使用addClass()方法和removeClass()方法。</p>
<pre><code>//&lt;input type=&quot;button&quot; value=&quot; 切换样式&quot;  id=&quot;b4&quot;/&gt;
$(&quot;#b4&quot;).click(function(){
   // 在没有样式与指定样式之间切换
   $(&quot;#mover&quot;).toggleClass(&quot;one&quot;);
})
</code></pre><h3 id="hasclass-方法操作"><a href="#hasClass-方法操作" class="headerlink" title="hasClass( )方法操作"></a>hasClass( )方法操作</h3><p>hasClass( )方法表示指定元素是否包含指定样式。</p>
<blockquote>
<p><strong>值得注意的是：</strong>hasClass( )方法并不能判断是否包含样式，而是判断是否包含指定样式。</p>
</blockquote>
<pre><code>//&lt;input type=&quot;button&quot; value=&quot; hasClass&quot;  id=&quot;b5&quot;/&gt;
$(&quot;#b5&quot;).click(function(){
   // 判断是否含有某个指定样式
   alert($(&quot;#mover&quot;).hasClass(&quot;one&quot;));
})
</code></pre><h3 id="css-方法操作"><a href="#css-方法操作" class="headerlink" title="css( )方法操作"></a>css( )方法操作</h3><p>css( )方法也可以获取或设置CSS样式，但并不是通过class属性，而是通过style属性直接设置CSS中的属性。</p>
<ul>
<li>获取样式：<ul>
<li>css(attrName)方法，用于获取当前style属性的值。</li>
</ul>
</li>
<li>设置样式：<ul>
<li>css(attrName,attrValue)方法，用于设置当前style属性的值。<strong>但每次只能设置一个CSS中的属性。</strong></li>
<li>css({attrName:attrValue,attrName:attrValue,…})方法，用于设置当前style属性的值。<strong>每次可以设置多个CSS中的属性。</strong></li>
</ul>
</li>
</ul>
<h2 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h2><h3 id="获取父元素"><a href="#获取父元素" class="headerlink" title="获取父元素"></a>获取父元素</h3><p>parent( )方法可以获取指定元素的父元素。</p>
<ul>
<li>parent()方法，不传递任何参数，是获取指定元素的父元素。</li>
<li><p>parent(selector)方法，是获取指定元素的符合selector选择器的父元素。</p>
<pre><code>//第一个&lt;li&gt;元素的父元素
var $parent = $(&quot;li:first&quot;).parent();    
</code></pre></li>
</ul>
<h3 id="获取子元素"><a href="#获取子元素" class="headerlink" title="获取子元素"></a>获取子元素</h3><p>children( )方法可以获取指定元素的子元素。</p>
<ul>
<li>children()方法，不传递任何参数，可以获取指定元素的所有子元素。</li>
<li><p>children(selector)方法，是获取指定元素的符合selector选择器的子元素。</p>
<pre><code>var $ul = $(&quot;ul&quot;).children();
alert( $ul.length );//&lt;p&gt;元素下有3个子元素
</code></pre></li>
</ul>
<h3 id="获取兄弟元素"><a href="#获取兄弟元素" class="headerlink" title="获取兄弟元素"></a>获取兄弟元素</h3><ul>
<li>next( )方法是获取指定元素的下一个兄弟元素。<ul>
<li>next()方法，不传递任何参数，是获取指定元素的下一个兄弟元素。</li>
<li>next(selector)方法，是获取指定元素符合selector选择器的下一个兄弟元素。</li>
</ul>
</li>
</ul>
<pre><code>var $p1 = $(&quot;p&quot;).next();
alert( $p1.html() );  //  紧邻&lt;p&gt;元素后的同辈元素
</code></pre><ul>
<li>prev( )方法是获取指定元素的上一个兄弟元素。<ul>
<li>prev( )方法，不传递任何参数，是获取指定元素的上一个兄弟元素。</li>
<li>prev(selector)方法，是获取指定元素符合selector选择器的上一个兄弟元素。</li>
</ul>
</li>
</ul>
<pre><code>var $ul = $(&quot;ul&quot;).prev();
alert( $ul.html() );  //  紧邻&lt;ul&gt;元素前的同辈元素
</code></pre><ul>
<li>siblings( )方法是获取指定元素的所有兄弟元素。<ul>
<li>siblings( )方法，不传递任何参数，是获取指定元素的所有兄弟元素。</li>
<li>siblings(selector)方法，是获取指定元素符合selector选择器的所有兄弟元素。</li>
</ul>
</li>
</ul>
<pre><code>var $p2 = $(&quot;p&quot;).siblings();
alert( $p2.html() );  //  紧邻&lt;p&gt;元素的唯一同辈元素
</code></pre><h3 id="查找指定后代元素"><a href="#查找指定后代元素" class="headerlink" title="查找指定后代元素"></a>查找指定后代元素</h3><p>find(selector)方法，可以查找指定元素的符合selector选择器的后代元素。</p>
<pre><code>var eles = $(&quot;ul&quot;).find(&quot;li&quot;);    //查找ul元素下的所有li元素
</code></pre><hr>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h4 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h4><p>按照原生DOM的思路，创建节点需要分别创建元素节点、文本节点和属性节点。</p>
<ul>
<li>元素节点，使用jQuery的工厂函数 $(HTML代码)来创建。</li>
<li>文本节点，使用jQuery的text( )方法进行设置文本，而不需要创建文本节点。</li>
<li>属性节点，使用jQuery的attr( )方法进行设置属性，而不需要创建属性节点。</li>
</ul>
<p>其实，使用jQuery创建元素，并不需要按照原生DOM的思路进行创建。可以一步代码创建完整的元素。</p>
<pre><code>//创建一个&lt;li&gt;元素 包括元素节点,文本节点和属性节点
var $li = $(&quot;&lt;li title=&apos;香蕉&apos;&gt;香蕉&lt;/li&gt;&quot;);

// 获取&lt;ul&gt;节点 &lt;li&gt;的父节点
var $parent = $(&quot;ul&quot;);

// 添加到&lt;ul&gt;节点中，使之能在网页中显示
$parent.append($li);
</code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>jQuery中的插入操作分为内部插入和外部插入。</p>
<ul>
<li>内部插入<ul>
<li>append( )方法，将append( )后面的元素插入在append( )前面指定元素的后面。</li>
<li>prepend( )方法，将prepend( )后面的元素插入在prepend( )前面指定元素的前面。</li>
<li>appendTo( )方法，将appendTo( )前面的元素插入在appendTo( )后面的元素的后面。</li>
<li>prependTo( )方法，将prependTo( )前面的元素插入在prependTo( )后面的元素的前面。</li>
</ul>
</li>
</ul>
<pre><code>// append - append后面的节点被添加到append前面的节点的后面
$(&quot;#tj&quot;).append($(&quot;#ms&quot;));

// prepend - prepend后面的节点被添加到prepend前面的节点的前面
$(&quot;#tj&quot;).prepend($(&quot;#ms&quot;));

// appendTo - appendTo前面的节点被添加到appendTo后面的节点的后面
$(&quot;#tj&quot;).appendTo($(&quot;#ms&quot;));

// prependTo - prependTo前面的节点被添加到prependTo后面的节点的前面
$(&quot;#tj&quot;).prependTo($(&quot;#ms&quot;));
</code></pre><ul>
<li>外部插入<ul>
<li>before( )方法，将before( )后面的元素插入在before( )前面的指定元素的前面。</li>
<li>after( )方法，将after( )后面的元素插入在after( )前面的指定元素的后面。</li>
<li>insertBefore( )方法，将insertBefore( )前面的元素插入在insertBefore( )后面的指定元素的前面。</li>
<li>insertAfter( )方法，将insertAfter( )前面的元素插入在insertAfter( )后面的指定元素的后面。</li>
</ul>
</li>
</ul>
<pre><code>// before - before后面的节点被添加到before前面的节点的前面
$(&quot;#tj&quot;).before($(&quot;#ms&quot;));

// after - after后面的节点被添加到after前面的节点的后面
$(&quot;#tj&quot;).after($(&quot;#ms&quot;));

// insertBefore
$(&quot;#tj&quot;).insertBefore($(&quot;#ms&quot;));

// insertAfter
$(&quot;#tj&quot;).insertAfter($(&quot;#ms&quot;));
</code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>jQuery中的删除操作分别为remove( )方法和empty( )方法。</p>
<ul>
<li>remove( )方法，删除自身元素及所有后代元素。</li>
<li>empty( )方法，删除所有后代元素，但保留自身元素。该方法适合完成清空操作。</li>
</ul>
<pre><code>$(&quot;ul li:eq(1)&quot;).remove(); // 获取第二个&lt;li&gt;元素节点后，将它从网页中删除

$(&quot;ul li&quot;).remove(&quot;li[title!=菠萝]&quot;);  //把&lt;li&gt;元素中属性title不等于&quot;菠萝&quot;的&lt;li&gt;元素删除

$(&quot;ul li:eq(1)&quot;).empty(); // 获取第二个&lt;li&gt;元素节点后，清空此元素里的内容
</code></pre><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><p>jQuery中的替换操作分别为replaceWith( )方法和replaceAll( )方法。</p>
<ul>
<li>replaceWith( )方法，该方法前面的元素是被替换元素。</li>
<li>replaceAll( )方法，就是颠倒了的repalceWith( )方法。</li>
</ul>
<pre><code>$(&quot;p&quot;).replaceWith(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;);
// 同样的实现： $(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;).replaceAll(&quot;p&quot;);
</code></pre><h4 id="复制操作"><a href="#复制操作" class="headerlink" title="复制操作"></a>复制操作</h4><p>jQuery中的复制操作使用的方法为clone( )方法，该方法与原生DOM中的复制节点的方法cloneNode( )在使用时极为相似。</p>
<ul>
<li>原生DOM中的cloneNode(Boolean)方法，参数Boolean表示是否复制后代节点。</li>
<li>jQuery中的clone(Boolean)方法，参数Boolean表示是否复制事件。</li>
</ul>
<pre><code>$(&quot;ul li&quot;).click(function(){
   $(this).clone().appendTo(&quot;ul&quot;); // 复制当前点击的节点，并将它追加到&lt;ul&gt;元素
   $(this).clone(true).appendTo(&quot;ul&quot;); // 注意参数true
   //可以复制自己，并且他的副本也有同样功能
})
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jquery入门&quot;&gt;&lt;a href=&quot;#jQuery入门&quot; class=&quot;headerlink&quot; title=&quot;jQuery入门&quot;&gt;&lt;/a&gt;jQuery入门&lt;/h1&gt;&lt;h2 id=&quot;javascript类库&quot;&gt;&lt;a href=&quot;#JavaScript类库&quot; cla
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>this关键字解析</title>
    <link href="http://yoursite.com/2017/08/02/this%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/08/02/this关键字解析/</id>
    <published>2017-08-02T14:11:19.000Z</published>
    <updated>2017-08-10T07:49:15.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h1><p>独立函数调用,如果使用了非严格模式,this会绑定到全局对象(window)</p>
<pre><code>function foo(){
    console.log(this.a);
 }
var a = 2;
foo(); // 2
(function(){
    &quot;use strict&quot;
    foo(); // 2 
})();
</code></pre><p>独立函数调用,如果使用严格模式(strict mode),this 会绑定到undefined:</p>
<pre><code>function foo() {
    &quot;use strict&quot;;
    console.log( this.a );
}
var a = 2;
foo(); //报错!property &apos;a&apos; of undefined at foo
</code></pre><p>这里有一个微妙但是非常重要的细节,虽然this的绑定规则完全取决于调用位置.<br>但是只有foo()运行在非strict mode下时,默认绑定才能绑定到全局对象<br>严格模式下调用foo()不会影响默认绑定规则</p>
<pre><code>function foo() {
    console.log( this.a );
}
var a = 2;
(function(){
    &quot;use strict&quot;;
    foo(); //2
})();
</code></pre><h1 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h1><p>隐式绑定的规则是调用位置是否有上下文对象,或者说是否被某个对象拥有或者包含<br>当函数引用有上下文对象时,隐式绑定规则会把函数调用中的this绑定到这个上下文对象</p>
<pre><code>function foo() {
    console.log( this.a );
}
var obj = {
    a: 2,
    foo: foo
};
obj.foo(); //2
</code></pre><p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置</p>
<pre><code>function foo() {
    console.log( this.a );
}
var obj2 = {
    a: 42,
    foo: foo
};
var obj1 = {
    a: 2,
    obj2: obj2
};
obj1.obj2.foo(); //42
//这里的最顶层或最后一层指的是obj2
</code></pre><h1 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h1><p>一个最常见的 this 绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把 this 绑定到全局对象或者 undefined 上，取决于是否是严格模式。</p>
<pre><code>function foo() {
    console.log( this.a );
}
var a = &quot;oops, global&quot;; 
var obj = {
    a: 2,
    foo: foo
};

var bar = obj.foo; 
bar(); // oops, globa
</code></pre><p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值:</p>
<pre><code>function foo() {
    console.log( this.a );
}
function doFoo(fn) {
    fn(); 
}

var a = &quot;oops, global&quot;; 
var obj = {
    a: 2,
    foo: foo
};

doFoo( obj.foo );  // oops, global
</code></pre><p>如果把函数传入语言内置的函数而不是传入你自己声明的函数，结果是一样的，没有区别<br>JavaScript环境中内置的 setTimeout() 函数实现和下面的伪代码类似：</p>
<pre><code>function setTimeout(fn,delay) {
    // 等待delay毫秒
    fn(); // &lt;-- 调用位置！
  }


function foo() {
    console.log( this.a );
}

var a = &quot;oops, global&quot;; 
var obj = {
    a: 2,
    foo: foo
};

setTimeout( obj.foo, 1000 );  // oops, global\
</code></pre><p>下文会说怎么解决隐式丢失的问题.</p>
<h1 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h1><p>我们不想在对象内部包含函数引用(在对象外声明一个函数,在对象里边调用这个函数)，而想在某个对象上强制调用函数(示例)<br>具体点说，可以使用函数的 call(..) 和 apply(..) 方法来实现显示绑定<br>在说显示绑定之前我们先说一下call()和apply()</p>
<pre><code>function.apply(thisobj, args)
//thsiobj - 调用function的对象.在函数体重,thisobj是关键字this的值
//args      - 一个数组,它的元素是传递给函数function的参数值
//返回值   - 调用函数function的返回值
function.call(thisobj, args...)
//thisobj - 调用function的对象.在函数主体中,thisobj是关键字this的值
//atgs       - 任意多个参数,这些参数将传递给函数function

//call()将指定的函数function作为对象thisobj的方法来调用，把参数列
    表中thisobj后的参数传递给它，返回值是调用函数后的返回值。在函数体
    内，关键字this引用thisobj对象。 
</code></pre><p>普通对象属性查找:</p>
<pre><code>function foo(a,b) {
    console.log( this.a,a,b );
}
var obj = {
    a:2
};
foo.call( obj,&quot;a&quot;,&quot;b&quot;); //2 a b
//正常数组
var a=Array.apply(null,{length:3});
console.log(a);
a.map(function(v,i){console.log(i)})

//稀疏数组
var b=new Array(3);
console.log(b);
b.map(function(v,i){console.log(i)})
</code></pre><h1 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h1><p>先给出硬绑定一个小的demo然后再说什么是硬绑定</p>
<pre><code>function foo() {
    console.log( this.a );/
}

var a =1;
var obj = {
    a:2
};
var obj_test = {
    a:&quot;test&quot;
};
var bar = function() {
    console.log( this.a );
    foo.call( obj );
};

bar(); // 1 2
setTimeout( bar, 1000 ); // 1 2
bar.call( obj_test ); //test  2   硬绑定的bar不可能再修改它的this(指的是foo中的this)
</code></pre><p>我们来看看这个显式绑定变种到底是怎样工作的。我们创建了函数 bar() ，并在它的内部手动调用了 foo.call(obj) ，因此强制把 foo 的 this 绑定到了 obj 。无论之后如何调用函数 bar ，它总会手动在 obj 上调用 foo 。这种绑定是一种显式的强制绑定，因此我们称之为硬绑定。</p>
<pre><code>示例:
//硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值
function foo(arg1,arg2) {
    console.log( this.a,arg1,arg2);
    return this.a + arg1;
}
var obj = {
    a:2
};
var bar = function() {
    return foo.apply( obj, arguments);
};


var b = bar(3,2); // 2 3 2
console.log( b ); // 5


示例:
function foo(something,otherthing) {
        console.log( this.a+&quot; &quot;+ something+&quot; &quot;+  otherthing);
        return this.a + something;
    }
    // 简单的辅助绑定函数    bind函数的作用：返回一个新的函数，并且指定该新函数的this指向
    function bind(fn, obj) {
        return function() {
                return fn.apply( obj, arguments );
            };
    }

    var obj = {
        a:2
    };
    var obj_test = {
        a:22
    };


    var bar = bind( foo, obj);
    var b = bar(3); // 2 3 undefined
    console.log( b ); // 5

    bar.call(obj_test,3);//2 3 undefined
</code></pre><h1 id="硬绑定函数"><a href="#硬绑定函数" class="headerlink" title="硬绑定函数"></a>硬绑定函数</h1><p>给出一个小demo:</p>
<pre><code>document.write(&quot;test&quot;);
var altwrite = document.write;
altwrite(&quot;hello&quot;); // 报错 TypeError
</code></pre><p>altwrite()函数改变了write的this的指向，让它指向global或window对象，导致执行时提示非法调用异常.<br>以下是解决办法:</p>
<pre><code>altwrite.bind(document)(&quot; hello&quot;);  // test hello
altwrite.call(document, &quot; call&quot;);    // test hello
altwrite.apply(document, [&quot; apply&quot;]);    // test hello
altwrite(&quot;hello&quot;);
</code></pre><h1 id="解决隐式丢失"><a href="#解决隐式丢失" class="headerlink" title="解决隐式丢失"></a>解决隐式丢失</h1><pre><code>function foo() {
        console.log( this.a );
    }

    var a = &quot;oops, global&quot;; // a是全局对象的属性
    var obj = {
        a: 2,
        foo: foo
    };

    var test = obj.foo;
    test();



    var bar = foo.bind(obj); //硬绑定
    bar(); // &quot;2&quot;
</code></pre><h1 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h1><p>我们重新定义一下JavaScript中的“构造函数”。JavaScript，构造函数只是一些使用 new 操作符时被调用的函数。</p>
<p>它们并不会属于某个类，也不会实例化一个类。实际上，它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。<br>!!!!!实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”</p>
<p>使用 new 来调用函数，或者说发生构造函数调用时，对于我们的this来说。<br>这个新对象会绑定到函数调用的 this 。</p>
<pre><code>function foo(a) {
    this.a = a;
}
var bar = new foo(2);
console.log( bar.a ); // 2
</code></pre><p>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。<br>new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定。</p>
<h1 id="绑定例外"><a href="#绑定例外" class="headerlink" title="绑定例外"></a>绑定例外</h1><p>示例:</p>
<pre><code>function foo() {
  setTimeout(() =&gt; {
    console.log(&apos;id:&apos;, this.id); 
  }, 100);
}

var id = 21;

foo.call({ id: 42 })
</code></pre><p>如果你把null或者undefined作为this的绑定对象传入call、apply或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。</p>
<pre><code>function foo() {
    console.log( this.a );
}
var a = 2222;
foo.call( null ); // 2
</code></pre><h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><p>给目标函数预绑定一些参数<br>示例:</p>
<pre><code>function foo(a,b) {
    console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b );
}
// 把数组“展开”成参数
foo.apply( null, [2, 3] ); // a:2, b:3

// 使用 bind(..) 进行柯里化
var bar = foo.bind( null, [2] );
bar( 3 ); // a:2, b:3
</code></pre><p>示例:</p>
<pre><code>function foo(a,b) {
    console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b );
}
// 我们的DMZ空对象,“DMZ”（demilitarized zone，非军事区）
var ø = Object.create( null );//{}
// 把数组展开成参数
foo.apply( ø, [2, 3] ); // a:2, b:3
// 使用bind(..)进行柯里化
var bar = foo.bind( ø, 2 );
bar( 3 ); // a:2, b:3
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;默认绑定&quot;&gt;&lt;a href=&quot;#默认绑定&quot; class=&quot;headerlink&quot; title=&quot;默认绑定&quot;&gt;&lt;/a&gt;默认绑定&lt;/h1&gt;&lt;p&gt;独立函数调用,如果使用了非严格模式,this会绑定到全局对象(window)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript高级" scheme="http://yoursite.com/tags/JavaScript%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>一天学会zepto</title>
    <link href="http://yoursite.com/2017/08/01/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Ahexo/"/>
    <id>http://yoursite.com/2017/08/01/一天学会hexo/</id>
    <published>2017-08-01T00:09:31.000Z</published>
    <updated>2017-08-11T00:34:49.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果你是一个有1-3年工作经验的人相信读完这篇文章你会有所收获,如果你会<br>jquery并且掌握不错的情况下读完此篇文章,那么恭喜你学习了一个框架。</p>
</blockquote>
<h1 id="zepto简介"><a href="#zepto简介" class="headerlink" title="zepto简介"></a>zepto简介</h1><pre><code>- zepto是轻量级的JavaScript库，专门为移动端定制的框架
- 与jquery有着类似的API，俗称：会jquery就会用zepto
</code></pre><h1 id="zepto的特点"><a href="#zepto的特点" class="headerlink" title="zepto的特点"></a>zepto的特点</h1><pre><code>- 针对移动端
- 轻量级，压缩版本只有8kb左右
- 响应，执行快
- 语法，API大部分同jquery一样，学习难度低，上手快
- 目前API完善的框架中体积最小的一个(没有之一)
</code></pre><h1 id="zepto与jquery的前世今生"><a href="#zepto与jquery的前世今生" class="headerlink" title="zepto与jquery的前世今生"></a>zepto与jquery的前世今生</h1><ul>
<li>相同点:<ul>
<li>都是优秀的js函数库</li>
<li>语法，API大部分都一样（zepto是按照jquery的思路来设计的）</li>
<li>zepto相当于jquery的子集</li>
<li>同jquery一样都是以$为核心函数</li>
</ul>
</li>
<li>不同点:<ul>
<li>jquery:<ul>
<li>针对的更多的是PC端</li>
<li>体积较重</li>
<li>API较为完善</li>
</ul>
</li>
<li>zepto<ul>
<li>针对的是移动端</li>
<li>体积较轻</li>
<li>有自己独特的移动端事件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="zepto-core"><a href="#zepto-core" class="headerlink" title="zepto core"></a>zepto core</h1><pre><code>- 核心函数
    - 作为函数调用
        - 参数为函数
        - 参数为选择器字符串
        - 参数为DOM code
        - 参数为html标签字符串
    - 作为对象使用
        - 发送ajax请求 - $.ajax() 等
        - 其他api方法  - $.each() 等
- 与jquery不同的API
    - DOM操作
    - each方法
    - offset()
    - width()height()
    - 事件委托
    - 隐藏元素
    - attr与prop
</code></pre><h1 id="zepto事件机制"><a href="#zepto事件机制" class="headerlink" title="zepto事件机制"></a>zepto事件机制</h1><pre><code>- touch Event
    - tap()
    - singleTap()
    - doubleTap()
    - longTap()
    - swipe()
- Event
    - zepto有自己的一套事件机制，并且对不同的浏览器做了内部的封装处理。
    - 舍弃了bind，delegate，die，同样jquery中舍弃了live，delegate等
    - 统一使用on，off等标准事件
</code></pre><h1 id="form"><a href="#form" class="headerlink" title="form"></a>form</h1><pre><code>- serialize() 
    - 在Ajax post请求中将用作提交的表单元素的值编译成 URL-encoded 字符串。
- serializeArray() 
    - 将用作提交的表单元素的值编译成拥有name和value对象组成的数组                        
    - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。 
- submit() 
    - 为 &quot;submit&quot; 事件绑定一个处理函数，或者触发元素上的 &quot;submit&quot; 事件。
</code></pre><h1 id="zepto和jquery方法的不同"><a href="#zepto和jquery方法的不同" class="headerlink" title="zepto和jquery方法的不同"></a>zepto和jquery方法的不同</h1><h2 id="attr与prop的区别"><a href="#attr与prop的区别" class="headerlink" title="attr与prop的区别"></a>attr与prop的区别</h2><pre><code>-jquery
    - prop多用在标签的固有属性，布尔值属性。比如：a标签的href，class，selected，checked等。
    - attr多用在自定义属性上。
    - jquery中用attr获取布尔值属性且布尔值属性在标签体内没有定义的时候会得到 undefined；
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(function () &#123;</div><div class="line">	$(&apos;option&apos;).each(function () &#123;</div><div class="line">			//console.log($(this).prop(&apos;selected&apos;));</div><div class="line">			console.log($(this).attr(&apos;selected&apos;));</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>

- zepto
    - 在zepto中用attr也可以获取布尔值属性;
    - prop在读取属性的时候 优先级 高于attr，布尔值属性的读取还是建议用prop;
    - 坑！------zepto中 removeProp()的方法。在1.2+版本才支持。
</code></pre><h2 id="dom操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><pre><code>-  jquery
    -  jquery中插入DOM元素的时候添加配置对象(比如：id，class等。。。)不起作用。
- zepto
    - 插入DOM元素的时候添加配置对象（id，class等。。）的时候可以添加进去，并且会直接显示在标签属性内，可以操作，影响DOM元素。
</code></pre><h2 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h2><pre><code>- jquery
    - $.each(collection, function(index, item){ ... })
    - 可以遍历数组,以index，item的形式。
    - 可以遍历对象，以key-value的形式。
    - 不可以遍历字符串。
- zepto
    - $.each(collection, function(index, item){ ... })
    - 可以遍历数组,以index，item的形式。
    - 可以遍历对象，以key-value的形式。
    - 可以遍历字符串。
    - 遍历json对象以字符串的形式遍历。 
</code></pre><h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><pre><code>- jquery
    - 获取匹配元素在当前视口的相对偏移。
    - 返回的对象包含两个整型属性：top 和 left。此方法只对可见元素有效。
- zepto
    - 获得当前元素相对于视口的位置。
    - 返回一个对象含有： top, left, width和height(获取到的width，height都是包含padding和border的值)。
</code></pre><h2 id="获取宽高"><a href="#获取宽高" class="headerlink" title="获取宽高"></a>获取宽高</h2><pre><code>- jquery
    - width(),height()---content内容区的宽高，没有单位px。
    - .css(&apos;width&apos;)----可以获取content内容区的宽高、padding、border的值，有单位px。
    - innerHeight(),innerWidth()---outerHeight(),outerWidth()来获取。
- zepto
    - zepto中的width(),height()是根据盒模型来取值的，包含补白和border的值。且不带单位。
    - zepto中没有innerHeight(),innerWidth()---outerHeight(),outerWidth()。
    - .css获取的width，height是内容区的宽高，包含单位。
    - 通过.css()获取padding，border的值。
</code></pre><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><pre><code>- jquery
        - $(function () {
            $(&apos;#box&apos;).on(&apos;click&apos;, &apos;.a&apos;, function () {
                alert(&apos;我是a触发的事件委托&apos;);
                $(this).removeClass(&apos;a&apos;).addClass(&apos;b&apos;);
            });

            //b的事件委托
            $(&apos;#box&apos;).on(&apos;click&apos;, &apos;.b&apos;, function () {
                alert(&apos;我是b触发的事件委托&apos;);
                $(this).removeClass(&apos;b&apos;).addClass(&apos;a&apos;);
            });
            $(&apos;#box&apos;).append(&apos;&lt;p class=&quot;a&quot;&gt;我是新添加的p标签&lt;/p&gt;&apos;)
        });
        - 点击a的时候弹出&quot;我是a触发的事件委托&quot;,a的class变为 b
        - 点击b的时候弹出&quot;我是b触发的事件委托&quot;,b的class变为 a

- zepto
    - 坑！！！！
        - 在zepto中事件委托 委托在同一个父元素身上的时候
        - 委托的事件先被依次放入数组队列里，然后由自身开始往后找直到找到最后，期间符合条件的元素委托的事件都会执行。
           1、委托在同一个父元素
            2、同一个事件
            3、委托关联  操作的类要进行关联
            4、顺序---从当前的位置往后看
                $(function () {
                $(&apos;body&apos;).on(&apos;touchstart&apos;, &apos;.a&apos;, function () {
                    alert(&apos;我是a触发的事件委托&apos;);
                    $(this).removeClass(&apos;a&apos;).addClass(&apos;b&apos;);
                });
                //b额事件委托
                $(&apos;#box&apos;).on(&apos;touchstart&apos;, &apos;.b&apos;, function () {
                    $(&apos;#box1&apos;).css(&apos;background&apos;, &apos;red&apos;)
                    console.log(this)
                    alert(&apos;我是b触发的事件委托&apos;);
                    $(this).removeClass(&apos;b&apos;).addClass(&apos;a&apos;);
                });
                $(&apos;#box&apos;).append(&apos;&lt;p class=&quot;a&quot;&gt;我是新添加的p标签&lt;/p&gt;&apos;)
                });
                - 点击a触发&quot;我是a触发的事件委托&quot;a的class变成b
                - 点击b会先触发&quot;我是b触发的事件委托&quot;,然后再弹出&quot;我是a触发的事件委托&quot;,在a中console.log(this),则输出的是b。
</code></pre><h2 id="tocuh-event"><a href="#tocuh-Event" class="headerlink" title="tocuh Event"></a>tocuh Event</h2><pre><code>- jquery
    -     on()  绑定事件处理程序
    -    off() 方法移除用目标元素on绑定的事件处理程序。
    -    bind()  为每个匹配元素的特定事件绑定事件处理函数，可同时绑定多个事件，也可以自定义事件。
    -    one() 为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。只执行一次。
    -    trigger() 触发有bind定义的事件（通常是自定义事件）
    -    unbind()  bind的反向操作，删除匹配元素所绑定的bind事件。
- zepto
    - tap()  点击事件 利用在document上绑定touch事件来模拟tap事件的，并且tap事件会冒泡到document上
    - singleTap()  点击事件
    - doubleTap()  双击事件
    - longTap()    当一个元素被按住超过750ms触发。
    - swipe, swipeLeft, swipeRight, swipeUp,swipeDown — 当元素被划过（同一个方向大于30px）时触发。(可选择给定的方向)
    - 在一个方向滑动大于30px即为滑动。否则算点击。
</code></pre><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><pre><code>- zepto有自己的一套事件机制，并且对不同的浏览器做了兼容的内部封装处理。
- 像新版本的zepto中已经舍弃了bind，delegate，die，同样jquery中舍弃了live等。
- 现在统一使用on，off标准事件来绑定事件。
        $(function () {
        //事件绑定
            $(&apos;#box&apos;).on(&apos;touchstart&apos;,function () {
               alert(&apos;on事件&apos;);
            });

                $(&apos;#box&apos;).off();

        //事件委托
            $(&apos;#box1&apos;).on(&apos;touchstart&apos;,&apos;p&apos;,function () {
                alert($(this).html());
            });
        });
</code></pre><h2 id="form"><a href="#form-1" class="headerlink" title="form"></a>form</h2><pre><code>- serialize()
    - 在Ajax post请求中将用作提交的表单元素的值编译成 URL-encoded 字符串。---key(name)/value
    - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。
- serializeArray()
    - 将用作提交的表单元素的值编译成拥有name和value对象组成的数组。
    - 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。
- submit()
    - 为 &quot;submit&quot; 事件绑定一个处理函数，或者触发元素上的 &quot;submit&quot; 事件。
    - 当参数function没有给出时，触发当前表单“submit”事件，并且执行默认的提交表单行为，除非阻止默认行为。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你是一个有1-3年工作经验的人相信读完这篇文章你会有所收获,如果你会&lt;br&gt;jquery并且掌握不错的情况下读完此篇文章,那么恭喜你学习了一个框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;zepto简介&quot;&gt;&lt;a href=&quot;#ze
    
    </summary>
    
      <category term="zepto" scheme="http://yoursite.com/categories/zepto/"/>
    
    
      <category term="zepto" scheme="http://yoursite.com/tags/zepto/"/>
    
  </entry>
  
</feed>
